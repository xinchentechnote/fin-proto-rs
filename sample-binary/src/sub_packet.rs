// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct SubPacket {
    pub field_u_32: u32,
    pub field_i_16_list: Vec<i16>,
}

impl BinaryCodec for SubPacket {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_u32_le(self.field_u_32);
        put_list_le::<i16, u16>(buf, &self.field_i_16_list);
    }

    fn decode(buf: &mut Bytes) -> Option<SubPacket> {
        let field_u_32 = buf.get_u32_le();
        let field_i_16_list = get_list_le::<i16, u16>(buf)?;
        Some(Self {
            field_u_32,
            field_i_16_list,
        })
    }
}

#[cfg(test)]
mod sub_packet_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_sub_packet_codec() {
        let original = SubPacket {
            field_u_32: 123456,
            field_i_16_list: vec![-1234, -4321],
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = SubPacket::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
