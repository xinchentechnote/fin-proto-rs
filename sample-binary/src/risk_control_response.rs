// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct RiskControlResponse {
    pub unique_order_id: String,
    pub status: i32,
    pub msg: String,
}

impl BinaryCodec for RiskControlResponse {
    fn encode(&self, buf: &mut BytesMut) {
        put_string(buf, &self.unique_order_id);
        buf.put_i32(self.status);
        put_string(buf, &self.msg);
    }

    fn decode(buf: &mut Bytes) -> Option<RiskControlResponse> {
        let unique_order_id = get_string(buf)?;
        let status = buf.get_i32();
        let msg = get_string(buf)?;
        Some(Self {
            unique_order_id,
            status,
            msg,
        })
    }
}

#[cfg(test)]
mod risk_control_response_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_risk_control_response_codec() {
        let original = RiskControlResponse {
            unique_order_id: "example".to_string(),
            status: -123456,
            msg: "example".to_string(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = RiskControlResponse::decode(&mut bytes).unwrap();

        assert_eq!(original, decoded);
    }
}
