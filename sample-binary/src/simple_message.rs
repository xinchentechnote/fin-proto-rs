// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct SimpleMessage {
    pub msg_type: u16,
    pub json_body: String,
}

impl BinaryCodec for SimpleMessage {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_u16(self.msg_type);
        put_string(buf, &self.json_body)
    }

    fn decode(buf: &mut Bytes) -> Option<SimpleMessage> {
        let msg_type = buf.get_u16();
        let json_body = get_string(buf)?;
        Some(Self {
            msg_type,
            json_body,
        })
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use bytes::{Bytes, BytesMut};

    #[test]
    fn test_simple_message_encode_decode() {
        let original = SimpleMessage {
            msg_type: 1001,
            json_body: r#"{"key": "value"}"#.to_string(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);

        let mut bytes = buf.freeze();
        let decoded = SimpleMessage::decode(&mut bytes).expect("decode failed");

        assert_eq!(decoded, original);
    }

    #[test]
    fn test_simple_message_empty_json() {
        let original = SimpleMessage {
            msg_type: 42,
            json_body: "".to_string(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);

        let mut bytes = buf.freeze();
        let decoded = SimpleMessage::decode(&mut bytes).expect("decode failed");

        assert_eq!(decoded, original);
    }

    #[test]
    fn test_simple_message_truncated_data() {
        // Simulate buffer with only msg_type and no string length/content
        let mut buf = Bytes::from_static(&[0x03, 0xE9]); // 1001 in u16
        let decoded = SimpleMessage::decode(&mut buf);
        assert!(
            decoded.is_none(),
            "Expected decode failure on truncated data"
        );
    }
}
