// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct SimpleMessage {
    pub msg_type: u16,
    pub json_body: String,
}

impl BinaryCodec for SimpleMessage {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_u16(self.msg_type);
        put_string(buf, &self.json_body);
    }

    fn decode(buf: &mut Bytes) -> Option<SimpleMessage> {
        let msg_type = buf.get_u16();
        let json_body = get_string(buf)?;
        Some(Self {
            msg_type,
            json_body,
        })
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_simple_message_codec() {
        let original = SimpleMessage {
            msg_type: Default::default(),
            json_body: "example".to_string(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = SimpleMessage::decode(&mut bytes).unwrap();

        assert_eq!(original, decoded);
    }
}
