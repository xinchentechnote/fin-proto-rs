// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

use crate::risk_control_request::RiskControlRequest;
use crate::risk_control_response::RiskControlResponse;

#[derive(Debug, Clone, PartialEq)]
pub enum MsgType {
    RiskControlRequest(RiskControlRequest),
    RiskControlResponse(RiskControlResponse),
}

#[derive(Debug, Clone, PartialEq)]
pub struct SampleBinary {
    pub msg_type: u16,
    pub body_length: u16,
    pub msg_type_body: MsgType,
}

impl BinaryCodec for SampleBinary {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_u16(self.msg_type);
        buf.put_u16(self.body_length);
        match &self.msg_type_body {
            MsgType::RiskControlRequest(msg) => msg.encode(buf),
            MsgType::RiskControlResponse(msg) => msg.encode(buf),
        }
    }

    fn decode(buf: &mut Bytes) -> Option<SampleBinary> {
        let msg_type = buf.get_u16();
        let body_length = buf.get_u16();
        let msg_type_body = match msg_type {
            4 => MsgType::RiskControlRequest(RiskControlRequest::decode(buf)?),
            5 => MsgType::RiskControlResponse(RiskControlResponse::decode(buf)?),
            _ => return None,
        };
        Some(Self {
            msg_type,
            body_length,
            msg_type_body,
        })
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_sample_binary_codec() {
        let original = SampleBinary {
            body_length: 1234,
            msg_type: 4,
            msg_type_body: MsgType::RiskControlRequest(RiskControlRequest {
                unique_order_id: "example".to_string(),
                cl_ord_id: vec!['a'; 16].into_iter().collect::<String>(),
                market_id: vec!['a'; 3].into_iter().collect::<String>(),
                security_id: vec!['a'; 12].into_iter().collect::<String>(),
                side: 'a',
                order_type: 'a',
                price: 123456789,
                qty: 123456,
                extra_info: "example".to_string(),
            }),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = SampleBinary::decode(&mut bytes).unwrap();

        assert_eq!(original, decoded);
    }
}
