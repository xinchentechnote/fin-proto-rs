// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct SubOrder {
    pub cl_ord_id: String,
    pub price: u64,
    pub qty: u64,
}

impl BinaryCodec for SubOrder {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.cl_ord_id, 16);
        buf.put_u64(self.price);
        buf.put_u64(self.qty);
    }

    fn decode(buf: &mut Bytes) -> Option<SubOrder> {
        let cl_ord_id = get_char_array(buf, 16)?;
        let price = buf.get_u64();
        let qty = buf.get_u64();
        Some(Self {
            cl_ord_id,
            price,
            qty,
        })
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct RiskControlRequest {
    pub unique_order_id: String,
    pub cl_ord_id: String,
    pub market_id: String,
    pub security_id: String,
    pub side: char,
    pub order_type: char,
    pub price: u64,
    pub qty: u32,
    pub extra_info: Vec<String>,
    pub sub_order: SubOrder,
}

impl BinaryCodec for RiskControlRequest {
    fn encode(&self, buf: &mut BytesMut) {
        put_string(buf, &self.unique_order_id);
        put_char_array(buf, &self.cl_ord_id, 16);
        put_char_array(buf, &self.market_id, 3);
        put_char_array(buf, &self.security_id, 12);
        put_char(buf, self.side);
        put_char(buf, self.order_type);
        buf.put_u64(self.price);
        buf.put_u32(self.qty);
        put_string_list::<u16, u16>(buf, &self.extra_info);
        self.sub_order.encode(buf);
    }

    fn decode(buf: &mut Bytes) -> Option<RiskControlRequest> {
        let unique_order_id = get_string(buf)?;
        let cl_ord_id = get_char_array(buf, 16)?;
        let market_id = get_char_array(buf, 3)?;
        let security_id = get_char_array(buf, 12)?;
        let side = get_char(buf)?;
        let order_type = get_char(buf)?;
        let price = buf.get_u64();
        let qty = buf.get_u32();
        let extra_info = get_string_list::<u16, u16>(buf)?;
        let sub_order = SubOrder::decode(buf)?;
        Some(Self {
            unique_order_id,
            cl_ord_id,
            market_id,
            security_id,
            side,
            order_type,
            price,
            qty,
            extra_info,
            sub_order,
        })
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_risk_control_request_codec() {
        let original = RiskControlRequest {
            unique_order_id: "example".to_string(),
            cl_ord_id: vec!['a'; 16].into_iter().collect::<String>(),
            market_id: vec!['a'; 3].into_iter().collect::<String>(),
            security_id: vec!['a'; 12].into_iter().collect::<String>(),
            side: 'a',
            order_type: 'a',
            price: 123456789,
            qty: 123456,
            extra_info: vec!["example".to_string(), "test".to_string()],
            sub_order: SubOrder {
                cl_ord_id: "123".to_string(),
                price: 123,
                qty: 123456,
            },
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = RiskControlRequest::decode(&mut bytes).unwrap();

        assert_eq!(original, decoded);
    }
}
