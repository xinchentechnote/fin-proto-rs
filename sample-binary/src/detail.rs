// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct Detail {
    pub rule_name: String,
    pub code: u16,
}

impl BinaryCodec for Detail {
    fn encode(&self, buf: &mut BytesMut) {
        put_string(buf, &self.rule_name);
        buf.put_u16(self.code);
    }

    fn decode(buf: &mut Bytes) -> Option<Detail> {
        let rule_name = get_string(buf)?;
        let code = buf.get_u16();
        Some(Self { rule_name, code })
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_detail_codec() {
        let original = Detail {
            rule_name: "example".to_string(),
            code: 1234,
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = Detail::decode(&mut bytes).unwrap();

        assert_eq!(original, decoded);
    }
}
