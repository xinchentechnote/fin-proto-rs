-- Code generated by fin-protoc. DO NOT EDIT.

local function parse_be_uint64(buf, offset)
    local bytes = buf(offset, 8):bytes()
    return bytes:get_index(0) * 0x100000000000000 +
        bytes:get_index(1) * 0x1000000000000 +
        bytes:get_index(2) * 0x10000000000 +
        bytes:get_index(3) * 0x100000000 +
        bytes:get_index(4) * 0x1000000 +
        bytes:get_index(5) * 0x10000 +
        bytes:get_index(6) * 0x100 +
        bytes:get_index(7)
end

local sample_binary_proto = Proto("SampleBinary", "SampleBinary Protocol")
local fields = {
    -- Field from SampleBinary
    sample_binary_msg_type = ProtoField.uint32("sample_binary.msg_type", "MsgType", base.DEC),
    sample_binary_body_length = ProtoField.uint32("sample_binary.body_length", "BodyLength", base.DEC),
    -- Unsupported type: match
    -- Field from RiskControlRequest
    risk_control_request_unique_order_id = ProtoField.string("risk_control_request.unique_order_id", "UniqueOrderId"),
    risk_control_request_cl_ord_id = ProtoField.string("risk_control_request.cl_ord_id", "ClOrdID"),
    risk_control_request_market_id = ProtoField.string("risk_control_request.market_id", "MarketID"),
    risk_control_request_security_id = ProtoField.string("risk_control_request.security_id", "SecurityID"),
    risk_control_request_side = ProtoField.char("risk_control_request.side", "Side", base.OCT),
    risk_control_request_order_type = ProtoField.char("risk_control_request.order_type", "OrderType", base.OCT),
    risk_control_request_price = ProtoField.uint64("risk_control_request.price", "Price", base.DEC),
    risk_control_request_qty = ProtoField.uint32("risk_control_request.qty", "Qty", base.DEC),
    risk_control_request_extra_info = ProtoField.string("risk_control_request.extra_info", "ExtraInfo"),
    -- Field from SubOrder
    sub_order_cl_ord_id = ProtoField.string("sub_order.cl_ord_id", "ClOrdID"),
    sub_order_price = ProtoField.uint64("sub_order.price", "Price", base.DEC),
    sub_order_qty = ProtoField.uint32("sub_order.qty", "Qty", base.DEC),
    -- Field from RiskControlResponse
    risk_control_response_unique_order_id = ProtoField.string("risk_control_response.unique_order_id", "UniqueOrderId"),
    risk_control_response_status = ProtoField.int("risk_control_response.status", "Status", base.DEC),
    risk_control_response_msg = ProtoField.string("risk_control_response.msg", "Msg"),
    -- Field from Detail
    detail_rule_name = ProtoField.string("detail.rule_name", "RuleName"),
    detail_code = ProtoField.uint32("detail.code", "Code", base.DEC),
}

for _, field in pairs(fields) do
    sample_binary_proto.fields[field] = field
end

local function dissect_sub_order(buf, pinfo, tree, offset)
    local subtree = tree:add(sample_binary_proto, buf(offset, 1), "SubOrder")
    subtree:add(fields.sub_order_cl_ord_id, buf(offset, 16))
    offset = offset + 16
    subtree:add(fields.sub_order_price, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.sub_order_qty, buf(offset, 4))
    offset = offset + 4
    return offset
end

local function dissect_risk_control_request(buf, pinfo, tree, offset)
    local subtree = tree:add(sample_binary_proto, buf(offset, 1), "RiskControlRequest")
-- unsupported type: string
    subtree:add(fields.risk_control_request_cl_ord_id, buf(offset, 16))
    offset = offset + 16
    subtree:add(fields.risk_control_request_market_id, buf(offset, 3))
    offset = offset + 3
    subtree:add(fields.risk_control_request_security_id, buf(offset, 12))
    offset = offset + 12
    subtree:add(fields.risk_control_request_side, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.risk_control_request_order_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.risk_control_request_price, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.risk_control_request_qty, buf(offset, 4))
    offset = offset + 4
    local risk_control_request_extra_info_size = buf(offset, 2):uint()
    subtree:add("ExtraInfo Size: ".. risk_control_request_extra_info_size, buf(offset, 2))
    offset = offset + 2

    for i=1,risk_control_request_extra_info_size do
        offset = -- unsupported type: string

        pinfo.cols.info:append(" ExtraInfo["..i.."]")
    end
    dissect_sub_order(buf, pinfo, subtree, offset)
    pinfo.cols.info:set("SubOrder")
    return offset
end


local function dissect_risk_control_response(buf, pinfo, tree, offset)
    local subtree = tree:add(sample_binary_proto, buf(offset, 1), "RiskControlResponse")
-- unsupported type: string
    subtree:add(fields.risk_control_response_status, buf(offset, 4))
    offset = offset + 4
-- unsupported type: string
    return offset
end


local function dissect_detail(buf, pinfo, tree, offset)
    local subtree = tree:add(sample_binary_proto, buf(offset, 1), "Detail")
-- unsupported type: string
    subtree:add(fields.detail_code, buf(offset, 2))
    offset = offset + 2
    return offset
end


function sample_binary_proto.dissector(buf, pinfo, tree)
    pinfo.cols.protocol = "sample_binary"
    local offset = 0
    local msg_type = buf(offset, 4):uint()
    tree:add(fields.sample_binary_msg_type, buf(offset, 2))
    offset = offset + 2
    tree:add(fields.sample_binary_body_length, buf(offset, 2))
    offset = offset + 2
    if msg_type == 4 then -- RiskControlRequest
        dissect_risk_control_request(buf, pinfo, tree, offset)
        pinfo.cols.info:set("RiskControlRequest")
elseif msg_type == 5 then -- RiskControlResponse
        dissect_risk_control_response(buf, pinfo, tree, offset)
        pinfo.cols.info:set("RiskControlResponse")
    end
end


local tcp_table = DissectorTable.get("tcp.port")
tcp_table:add(8080, sample_binary_proto)
