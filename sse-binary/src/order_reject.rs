// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct OrderReject {
    pub biz_id: u32,
    pub biz_pbu: String,
    pub cl_ord_id: String,
    pub security_id: String,
    pub ord_rej_reason: u32,
    pub trade_date: u32,
    pub transact_time: u64,
    pub user_info: String,
}

impl BinaryCodec for OrderReject {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_u32(self.biz_id);
        put_char_array(buf, &self.biz_pbu, 8);
        put_char_array(buf, &self.cl_ord_id, 10);
        put_char_array(buf, &self.security_id, 12);
        buf.put_u32(self.ord_rej_reason);
        buf.put_u32(self.trade_date);
        buf.put_u64(self.transact_time);
        put_char_array(buf, &self.user_info, 32);
    }

    fn decode(buf: &mut Bytes) -> Option<OrderReject> {
        let biz_id = buf.get_u32();
        let biz_pbu = get_char_array(buf, 8)?;
        let cl_ord_id = get_char_array(buf, 10)?;
        let security_id = get_char_array(buf, 12)?;
        let ord_rej_reason = buf.get_u32();
        let trade_date = buf.get_u32();
        let transact_time = buf.get_u64();
        let user_info = get_char_array(buf, 32)?;
        Some(Self {
            biz_id,
            biz_pbu,
            cl_ord_id,
            security_id,
            ord_rej_reason,
            trade_date,
            transact_time,
            user_info,
        })
    }
}

#[cfg(test)]
mod order_reject_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_order_reject_codec() {
        let original = OrderReject {
            biz_id: 123456,
            biz_pbu: vec!['a'; 8].into_iter().collect::<String>(),
            cl_ord_id: vec!['a'; 10].into_iter().collect::<String>(),
            security_id: vec!['a'; 12].into_iter().collect::<String>(),
            ord_rej_reason: 123456,
            trade_date: 123456,
            transact_time: 123456789,
            user_info: vec!['a'; 32].into_iter().collect::<String>(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = OrderReject::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
