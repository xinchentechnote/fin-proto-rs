// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct Report {
    pub pbu: String,
    pub set_id: u32,
    pub report_index: u64,
    pub biz_id: u32,
    pub exec_type: String,
    pub biz_pbu: String,
    pub cl_ord_id: String,
    pub security_id: String,
    pub account: String,
    pub owner_type: u8,
    pub order_entry_time: u64,
    pub last_px: i64,
    pub last_qty: i64,
    pub gross_trade_amt: i64,
    pub side: String,
    pub order_qty: i64,
    pub leaves_qty: i64,
    pub ord_status: String,
    pub credit_tag: String,
    pub clearing_firm: String,
    pub branch_id: String,
    pub trd_cnfm_id: String,
    pub ord_cnfm_id: String,
    pub trade_date: u32,
    pub transact_time: u64,
    pub user_info: String,
}

impl BinaryCodec for Report {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.pbu, 8);
        buf.put_u32(self.set_id);
        buf.put_u64(self.report_index);
        buf.put_u32(self.biz_id);
        put_char_array(buf, &self.exec_type, 1);
        put_char_array(buf, &self.biz_pbu, 8);
        put_char_array(buf, &self.cl_ord_id, 10);
        put_char_array(buf, &self.security_id, 12);
        put_char_array(buf, &self.account, 13);
        buf.put_u8(self.owner_type);
        buf.put_u64(self.order_entry_time);
        buf.put_i64(self.last_px);
        buf.put_i64(self.last_qty);
        buf.put_i64(self.gross_trade_amt);
        put_char_array(buf, &self.side, 1);
        buf.put_i64(self.order_qty);
        buf.put_i64(self.leaves_qty);
        put_char_array(buf, &self.ord_status, 1);
        put_char_array(buf, &self.credit_tag, 2);
        put_char_array(buf, &self.clearing_firm, 8);
        put_char_array(buf, &self.branch_id, 8);
        put_char_array(buf, &self.trd_cnfm_id, 16);
        put_char_array(buf, &self.ord_cnfm_id, 16);
        buf.put_u32(self.trade_date);
        buf.put_u64(self.transact_time);
        put_char_array(buf, &self.user_info, 32);
    }

    fn decode(buf: &mut Bytes) -> Option<Report> {
        let pbu = get_char_array(buf, 8)?;
        let set_id = buf.get_u32();
        let report_index = buf.get_u64();
        let biz_id = buf.get_u32();
        let exec_type = get_char_array(buf, 1)?;
        let biz_pbu = get_char_array(buf, 8)?;
        let cl_ord_id = get_char_array(buf, 10)?;
        let security_id = get_char_array(buf, 12)?;
        let account = get_char_array(buf, 13)?;
        let owner_type = buf.get_u8();
        let order_entry_time = buf.get_u64();
        let last_px = buf.get_i64();
        let last_qty = buf.get_i64();
        let gross_trade_amt = buf.get_i64();
        let side = get_char_array(buf, 1)?;
        let order_qty = buf.get_i64();
        let leaves_qty = buf.get_i64();
        let ord_status = get_char_array(buf, 1)?;
        let credit_tag = get_char_array(buf, 2)?;
        let clearing_firm = get_char_array(buf, 8)?;
        let branch_id = get_char_array(buf, 8)?;
        let trd_cnfm_id = get_char_array(buf, 16)?;
        let ord_cnfm_id = get_char_array(buf, 16)?;
        let trade_date = buf.get_u32();
        let transact_time = buf.get_u64();
        let user_info = get_char_array(buf, 32)?;
        Some(Self {
            pbu,
            set_id,
            report_index,
            biz_id,
            exec_type,
            biz_pbu,
            cl_ord_id,
            security_id,
            account,
            owner_type,
            order_entry_time,
            last_px,
            last_qty,
            gross_trade_amt,
            side,
            order_qty,
            leaves_qty,
            ord_status,
            credit_tag,
            clearing_firm,
            branch_id,
            trd_cnfm_id,
            ord_cnfm_id,
            trade_date,
            transact_time,
            user_info,
        })
    }
}

#[cfg(test)]
mod report_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_report_codec() {
        let original = Report {
            pbu: vec!['a'; 8].into_iter().collect::<String>(),
            set_id: 123456,
            report_index: 123456789,
            biz_id: 123456,
            exec_type: vec!['a'; 1].into_iter().collect::<String>(),
            biz_pbu: vec!['a'; 8].into_iter().collect::<String>(),
            cl_ord_id: vec!['a'; 10].into_iter().collect::<String>(),
            security_id: vec!['a'; 12].into_iter().collect::<String>(),
            account: vec!['a'; 13].into_iter().collect::<String>(),
            owner_type: 42,
            order_entry_time: 123456789,
            last_px: -123456789,
            last_qty: -123456789,
            gross_trade_amt: -123456789,
            side: vec!['a'; 1].into_iter().collect::<String>(),
            order_qty: -123456789,
            leaves_qty: -123456789,
            ord_status: vec!['a'; 1].into_iter().collect::<String>(),
            credit_tag: vec!['a'; 2].into_iter().collect::<String>(),
            clearing_firm: vec!['a'; 8].into_iter().collect::<String>(),
            branch_id: vec!['a'; 8].into_iter().collect::<String>(),
            trd_cnfm_id: vec!['a'; 16].into_iter().collect::<String>(),
            ord_cnfm_id: vec!['a'; 16].into_iter().collect::<String>(),
            trade_date: 123456,
            transact_time: 123456789,
            user_info: vec!['a'; 32].into_iter().collect::<String>(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = Report::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
