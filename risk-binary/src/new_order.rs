// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct NewOrder {
    pub cl_ord_id: String,
    pub security_id: String,
    pub side: char,
    pub price: u64,
    pub order_qty: u64,
    pub ord_type: char,
    pub account: String,
}

impl BinaryCodec for NewOrder {
    fn encode(&self, buf: &mut BytesMut) {
        put_string::<u32>(buf, &self.cl_ord_id);
        put_string::<u32>(buf, &self.security_id);
        put_char(buf, self.side);
        buf.put_u64(self.price);
        buf.put_u64(self.order_qty);
        put_char(buf, self.ord_type);
        put_string::<u32>(buf, &self.account);
    }

    fn decode(buf: &mut Bytes) -> Option<NewOrder> {
        let cl_ord_id = get_string::<u32>(buf)?;
        let security_id = get_string::<u32>(buf)?;
        let side = get_char(buf)?;
        let price = buf.get_u64();
        let order_qty = buf.get_u64();
        let ord_type = get_char(buf)?;
        let account = get_string::<u32>(buf)?;
        Some(Self {
            cl_ord_id,
            security_id,
            side,
            price,
            order_qty,
            ord_type,
            account,
        })
    }
}

#[cfg(test)]
mod new_order_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_new_order_codec() {
        let original = NewOrder {
            cl_ord_id: "example".to_string(),
            security_id: "example".to_string(),
            side: 'a',
            price: 123456789,
            order_qty: 123456789,
            ord_type: 'a',
            account: "example".to_string(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = NewOrder::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
