// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct RiskResult {
    pub unique_order_id: String,
    pub risk_status: u8,
    pub risk_reason: String,
}

impl BinaryCodec for RiskResult {
    fn encode(&self, buf: &mut BytesMut) {
        put_string::<u32>(buf, &self.unique_order_id);
        buf.put_u8(self.risk_status);
        put_string::<u32>(buf, &self.risk_reason);
    }

    fn decode(buf: &mut Bytes) -> Option<RiskResult> {
        let unique_order_id = get_string::<u32>(buf)?;
        let risk_status = buf.get_u8();
        let risk_reason = get_string::<u32>(buf)?;
        Some(Self {
            unique_order_id,
            risk_status,
            risk_reason,
        })
    }
}

#[cfg(test)]
mod risk_result_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_risk_result_codec() {
        let original = RiskResult {
            unique_order_id: "example".to_string(),
            risk_status: 42,
            risk_reason: "example".to_string(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = RiskResult::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
