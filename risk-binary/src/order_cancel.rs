// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct OrderCancel {
    pub cl_ord_id: String,
    pub orig_cl_ord_id: String,
    pub security_id: String,
}

impl BinaryCodec for OrderCancel {
    fn encode(&self, buf: &mut BytesMut) {
        put_string::<u32>(buf, &self.cl_ord_id);
        put_string::<u32>(buf, &self.orig_cl_ord_id);
        put_string::<u32>(buf, &self.security_id);
    }

    fn decode(buf: &mut Bytes) -> Option<OrderCancel> {
        let cl_ord_id = get_string::<u32>(buf)?;
        let orig_cl_ord_id = get_string::<u32>(buf)?;
        let security_id = get_string::<u32>(buf)?;
        Some(Self {
            cl_ord_id,
            orig_cl_ord_id,
            security_id,
        })
    }
}

#[cfg(test)]
mod order_cancel_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_order_cancel_codec() {
        let original = OrderCancel {
            cl_ord_id: "example".to_string(),
            orig_cl_ord_id: "example".to_string(),
            security_id: "example".to_string(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = OrderCancel::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
