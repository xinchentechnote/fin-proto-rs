// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

use crate::cancel_reject::*;
use crate::execution_report::*;
use crate::new_order::*;
use crate::order_cancel::*;
use crate::order_confirm::*;

#[derive(Debug, Clone, PartialEq)]
pub enum RcBinaryBodyEnum {
    NewOrder(NewOrder),
    OrderConfirm(OrderConfirm),
    ExecutionReport(ExecutionReport),
    OrderCancel(OrderCancel),
    CancelReject(CancelReject),
}

#[derive(Debug, Clone, PartialEq)]
pub struct RcBinary {
    pub msg_type: u32,
    pub version: u32,
    pub msg_body_len: u32,
    pub body: RcBinaryBodyEnum,
}

impl BinaryCodec for RcBinary {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_u32(self.msg_type);
        buf.put_u32(self.version);
        buf.put_u32(self.msg_body_len);
        match &self.body {
            RcBinaryBodyEnum::NewOrder(msg) => msg.encode(buf),
            RcBinaryBodyEnum::OrderConfirm(msg) => msg.encode(buf),
            RcBinaryBodyEnum::ExecutionReport(msg) => msg.encode(buf),
            RcBinaryBodyEnum::OrderCancel(msg) => msg.encode(buf),
            RcBinaryBodyEnum::CancelReject(msg) => msg.encode(buf),
        }
    }

    fn decode(buf: &mut Bytes) -> Option<RcBinary> {
        let msg_type = buf.get_u32();
        let version = buf.get_u32();
        let msg_body_len = buf.get_u32();
        let body = match msg_type {
            100101 => RcBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            200102 => RcBinaryBodyEnum::OrderConfirm(OrderConfirm::decode(buf)?),
            200115 => RcBinaryBodyEnum::ExecutionReport(ExecutionReport::decode(buf)?),
            190007 => RcBinaryBodyEnum::OrderCancel(OrderCancel::decode(buf)?),
            290008 => RcBinaryBodyEnum::CancelReject(CancelReject::decode(buf)?),
            _ => return None,
        };
        Some(Self {
            msg_type,
            version,
            msg_body_len,
            body,
        })
    }
}

#[cfg(test)]
mod rc_binary_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_rc_binary_codec() {
        let original = RcBinary {
            version: 123456,
            msg_body_len: 123456,
            msg_type: 100101,
            body: RcBinaryBodyEnum::NewOrder(NewOrder {
                cl_ord_id: "example".to_string(),
                security_id: "example".to_string(),
                side: 'a',
                price: 123456789,
                order_qty: 123456789,
                ord_type: 'a',
                account: "example".to_string(),
            }),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = RcBinary::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
