// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct ExecRptSyncRsp {
    pub pbu: String,
    pub set_id: u32,
    pub begin_report_index: u64,
    pub end_report_index: u64,
    pub rej_reason: u32,
    pub text: String,
}

impl BinaryCodec for ExecRptSyncRsp {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.pbu, 8);
        buf.put_u32(self.set_id);
        buf.put_u64(self.begin_report_index);
        buf.put_u64(self.end_report_index);
        buf.put_u32(self.rej_reason);
        put_char_array(buf, &self.text, 64);
    }

    fn decode(buf: &mut Bytes) -> Option<ExecRptSyncRsp> {
        let pbu = get_char_array(buf, 8)?;
        let set_id = buf.get_u32();
        let begin_report_index = buf.get_u64();
        let end_report_index = buf.get_u64();
        let rej_reason = buf.get_u32();
        let text = get_char_array(buf, 64)?;
        Some(Self {
            pbu,
            set_id,
            begin_report_index,
            end_report_index,
            rej_reason,
            text,
        })
    }
}

#[cfg(test)]
mod exec_rpt_sync_rsp_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_exec_rpt_sync_rsp_codec() {
        let original = ExecRptSyncRsp {
            pbu: vec!['a'; 8].into_iter().collect::<String>(),
            set_id: 123456,
            begin_report_index: 123456789,
            end_report_index: 123456789,
            rej_reason: 123456,
            text: vec!['a'; 64].into_iter().collect::<String>(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = ExecRptSyncRsp::decode(&mut bytes).unwrap();

        assert_eq!(original, decoded);
    }
}
