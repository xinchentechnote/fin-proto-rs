// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct Logout {
    pub session_status: u32,
    pub text: String,
}

impl BinaryCodec for Logout {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_u32(self.session_status);
        put_char_array(buf, &self.text, 64);
    }

    fn decode(buf: &mut Bytes) -> Option<Logout> {
        let session_status = buf.get_u32();
        let text = get_char_array(buf, 64)?;
        Some(Self {
            session_status,
            text,
        })
    }
}

#[cfg(test)]
mod logout_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_logout_codec() {
        let original = Logout {
            session_status: 123456,
            text: vec!['a'; 64].into_iter().collect::<String>(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = Logout::decode(&mut bytes).unwrap();

        assert_eq!(original, decoded);
    }
}
