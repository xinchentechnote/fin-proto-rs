-- Code generated by fin-protoc. DO NOT EDIT.

local function parse_be_uint64(buf, offset)
    local bytes = buf(offset, 8):bytes()
    return bytes:get_index(0) * 0x100000000000000 +
        bytes:get_index(1) * 0x1000000000000 +
        bytes:get_index(2) * 0x10000000000 +
        bytes:get_index(3) * 0x100000000 +
        bytes:get_index(4) * 0x1000000 +
        bytes:get_index(5) * 0x10000 +
        bytes:get_index(6) * 0x100 +
        bytes:get_index(7)
end

local sse_binary_proto = Proto("SseBinary", "SseBinary Protocol")
local fields = {
    -- Field from CancelReject
    pbu = ProtoField.string("cancel_reject.pbu", "Pbu"),
    set_id = ProtoField.uint32("cancel_reject.set_id", "SetID", base.DEC),
    report_index = ProtoField.uint64("cancel_reject.report_index", "ReportIndex", base.DEC),
    biz_id = ProtoField.uint32("cancel_reject.biz_id", "BizID", base.DEC),
    biz_pbu = ProtoField.string("cancel_reject.biz_pbu", "BizPbu"),
    cl_ord_id = ProtoField.string("cancel_reject.cl_ord_id", "ClOrdID"),
    security_id = ProtoField.string("cancel_reject.security_id", "SecurityID"),
    orig_cl_ord_id = ProtoField.string("cancel_reject.orig_cl_ord_id", "OrigClOrdID"),
    branch_id = ProtoField.string("cancel_reject.branch_id", "BranchID"),
    cxl_rej_reason = ProtoField.uint32("cancel_reject.cxl_rej_reason", "CxlRejReason", base.DEC),
    trade_date = ProtoField.uint32("cancel_reject.trade_date", "TradeDate", base.DEC),
    transact_time = ProtoField.uint64("cancel_reject.transact_time", "TransactTime", base.DEC),
    user_info = ProtoField.string("cancel_reject.user_info", "UserInfo"),
    -- Field from ExecRptInfo
    platform_id = ProtoField.uint32("exec_rpt_info.platform_id", "PlatformID", base.DEC),
    pbu = ProtoField.string("exec_rpt_info.pbu", "Pbu"),
    set_id = ProtoField.uint32("exec_rpt_info.set_id", "SetID", base.DEC),
    -- Field from ExecRptSyncRsp
    -- Unsupported type: SubExecRptSyncRsp
    -- Field from Logon
    sender_comp_id = ProtoField.string("logon.sender_comp_id", "SenderCompID"),
    target_comp_id = ProtoField.string("logon.target_comp_id", "TargetCompID"),
    heart_bt_int = ProtoField.uint32("logon.heart_bt_int", "HeartBtInt", base.DEC),
    prtcl_version = ProtoField.string("logon.prtcl_version", "PrtclVersion"),
    trade_date = ProtoField.uint32("logon.trade_date", "TradeDate", base.DEC),
    q_size = ProtoField.uint32("logon.q_size", "QSize", base.DEC),
    -- Field from NewOrderSingle
    biz_id = ProtoField.uint32("new_order_single.biz_id", "BizID", base.DEC),
    biz_pbu = ProtoField.string("new_order_single.biz_pbu", "BizPbu"),
    cl_ord_id = ProtoField.string("new_order_single.cl_ord_id", "ClOrdID"),
    security_id = ProtoField.string("new_order_single.security_id", "SecurityID"),
    account = ProtoField.string("new_order_single.account", "Account"),
    owner_type = ProtoField.uint32("new_order_single.owner_type", "OwnerType", base.DEC),
    side = ProtoField.char("new_order_single.side", "Side", base.OCT),
    price = ProtoField.int64("new_order_single.price", "Price", base.DEC),
    order_qty = ProtoField.int64("new_order_single.order_qty", "OrderQty", base.DEC),
    ord_type = ProtoField.char("new_order_single.ord_type", "OrdType", base.OCT),
    time_in_force = ProtoField.char("new_order_single.time_in_force", "TimeInForce", base.OCT),
    transact_time = ProtoField.uint64("new_order_single.transact_time", "TransactTime", base.DEC),
    credit_tag = ProtoField.string("new_order_single.credit_tag", "CreditTag"),
    clearing_firm = ProtoField.string("new_order_single.clearing_firm", "ClearingFirm"),
    branch_id = ProtoField.string("new_order_single.branch_id", "BranchID"),
    user_info = ProtoField.string("new_order_single.user_info", "UserInfo"),
    -- Field from Confirm
    pbu = ProtoField.string("confirm.pbu", "Pbu"),
    set_id = ProtoField.uint32("confirm.set_id", "SetID", base.DEC),
    report_index = ProtoField.uint64("confirm.report_index", "ReportIndex", base.DEC),
    biz_id = ProtoField.uint32("confirm.biz_id", "BizID", base.DEC),
    exec_type = ProtoField.char("confirm.exec_type", "ExecType", base.OCT),
    biz_pbu = ProtoField.string("confirm.biz_pbu", "BizPbu"),
    cl_ord_id = ProtoField.string("confirm.cl_ord_id", "ClOrdID"),
    security_id = ProtoField.string("confirm.security_id", "SecurityID"),
    account = ProtoField.string("confirm.account", "Account"),
    owner_type = ProtoField.uint32("confirm.owner_type", "OwnerType", base.DEC),
    side = ProtoField.char("confirm.side", "Side", base.OCT),
    price = ProtoField.int64("confirm.price", "Price", base.DEC),
    order_qty = ProtoField.int64("confirm.order_qty", "OrderQty", base.DEC),
    leaves_qty = ProtoField.int64("confirm.leaves_qty", "LeavesQty", base.DEC),
    cxl_qty = ProtoField.int64("confirm.cxl_qty", "CxlQty", base.DEC),
    ord_type = ProtoField.char("confirm.ord_type", "OrdType", base.OCT),
    time_in_force = ProtoField.char("confirm.time_in_force", "TimeInForce", base.OCT),
    ord_status = ProtoField.char("confirm.ord_status", "OrdStatus", base.OCT),
    credit_tag = ProtoField.string("confirm.credit_tag", "CreditTag"),
    orig_cl_ord_id = ProtoField.string("confirm.orig_cl_ord_id", "OrigClOrdID"),
    clearing_firm = ProtoField.string("confirm.clearing_firm", "ClearingFirm"),
    branch_id = ProtoField.string("confirm.branch_id", "BranchID"),
    ord_rej_reason = ProtoField.uint32("confirm.ord_rej_reason", "OrdRejReason", base.DEC),
    ord_cnfm_id = ProtoField.string("confirm.ord_cnfm_id", "OrdCnfmID"),
    orig_ord_cnfm_id = ProtoField.string("confirm.orig_ord_cnfm_id", "OrigOrdCnfmID"),
    trade_date = ProtoField.uint32("confirm.trade_date", "TradeDate", base.DEC),
    transact_time = ProtoField.uint64("confirm.transact_time", "TransactTime", base.DEC),
    user_info = ProtoField.string("confirm.user_info", "UserInfo"),
    -- Field from Report
    pbu = ProtoField.string("report.pbu", "Pbu"),
    set_id = ProtoField.uint32("report.set_id", "SetID", base.DEC),
    report_index = ProtoField.uint64("report.report_index", "ReportIndex", base.DEC),
    biz_id = ProtoField.uint32("report.biz_id", "BizID", base.DEC),
    exec_type = ProtoField.char("report.exec_type", "ExecType", base.OCT),
    biz_pbu = ProtoField.string("report.biz_pbu", "BizPbu"),
    cl_ord_id = ProtoField.string("report.cl_ord_id", "ClOrdID"),
    security_id = ProtoField.string("report.security_id", "SecurityID"),
    account = ProtoField.string("report.account", "Account"),
    owner_type = ProtoField.uint32("report.owner_type", "OwnerType", base.DEC),
    side = ProtoField.char("report.side", "Side", base.OCT),
    price = ProtoField.int64("report.price", "Price", base.DEC),
    order_qty = ProtoField.int64("report.order_qty", "OrderQty", base.DEC),
    leaves_qty = ProtoField.int64("report.leaves_qty", "LeavesQty", base.DEC),
    cxl_qty = ProtoField.int64("report.cxl_qty", "CxlQty", base.DEC),
    ord_type = ProtoField.char("report.ord_type", "OrdType", base.OCT),
    time_in_force = ProtoField.char("report.time_in_force", "TimeInForce", base.OCT),
    ord_status = ProtoField.char("report.ord_status", "OrdStatus", base.OCT),
    credit_tag = ProtoField.string("report.credit_tag", "CreditTag"),
    orig_cl_ord_id = ProtoField.string("report.orig_cl_ord_id", "OrigClOrdID"),
    clearing_firm = ProtoField.string("report.clearing_firm", "ClearingFirm"),
    branch_id = ProtoField.string("report.branch_id", "BranchID"),
    ord_rej_reason = ProtoField.uint32("report.ord_rej_reason", "OrdRejReason", base.DEC),
    ord_cnfm_id = ProtoField.string("report.ord_cnfm_id", "OrdCnfmID"),
    orig_ord_cnfm_id = ProtoField.string("report.orig_ord_cnfm_id", "OrigOrdCnfmID"),
    trade_date = ProtoField.uint32("report.trade_date", "TradeDate", base.DEC),
    transact_time = ProtoField.uint64("report.transact_time", "TransactTime", base.DEC),
    user_info = ProtoField.string("report.user_info", "UserInfo"),
    -- Field from ExecRptSync
    -- Unsupported type: SubExecRptSync
    -- Field from ExecRptEndOfStream
    pbu = ProtoField.string("exec_rpt_end_of_stream.pbu", "Pbu"),
    set_id = ProtoField.uint32("exec_rpt_end_of_stream.set_id", "SetID", base.DEC),
    end_report_index = ProtoField.uint64("exec_rpt_end_of_stream.end_report_index", "EndReportIndex", base.DEC),
    -- Field from SseBinary
    msg_type = ProtoField.uint32("sse_binary.msg_type", "MsgType", base.DEC),
    msg_seq_num = ProtoField.uint64("sse_binary.msg_seq_num", "MsgSeqNum", base.DEC),
    msg_body_len = ProtoField.uint32("sse_binary.msg_body_len", "MsgBodyLen", base.DEC),
    -- Unsupported type: match
    checksum = ProtoField.uint32("sse_binary.checksum", "Checksum", base.DEC),
    -- Field from Heartbeat
    -- Field from Logout
    session_status = ProtoField.uint32("logout.session_status", "SessionStatus", base.DEC),
    text = ProtoField.string("logout.text", "Text"),
    -- Field from OrderReject
    biz_id = ProtoField.uint32("order_reject.biz_id", "BizID", base.DEC),
    biz_pbu = ProtoField.string("order_reject.biz_pbu", "BizPbu"),
    cl_ord_id = ProtoField.string("order_reject.cl_ord_id", "ClOrdID"),
    security_id = ProtoField.string("order_reject.security_id", "SecurityID"),
    ord_rej_reason = ProtoField.uint32("order_reject.ord_rej_reason", "OrdRejReason", base.DEC),
    trade_date = ProtoField.uint32("order_reject.trade_date", "TradeDate", base.DEC),
    transact_time = ProtoField.uint64("order_reject.transact_time", "TransactTime", base.DEC),
    user_info = ProtoField.string("order_reject.user_info", "UserInfo"),
    -- Field from PlatformState
    platform_id = ProtoField.uint32("platform_state.platform_id", "PlatformID", base.DEC),
    platform_state = ProtoField.uint32("platform_state.platform_state", "PlatformState", base.DEC),
    -- Field from OrderCancel
    biz_id = ProtoField.uint32("order_cancel.biz_id", "BizID", base.DEC),
    biz_pbu = ProtoField.string("order_cancel.biz_pbu", "BizPbu"),
    cl_ord_id = ProtoField.string("order_cancel.cl_ord_id", "ClOrdID"),
    security_id = ProtoField.string("order_cancel.security_id", "SecurityID"),
    account = ProtoField.string("order_cancel.account", "Account"),
    owner_type = ProtoField.uint32("order_cancel.owner_type", "OwnerType", base.DEC),
    side = ProtoField.char("order_cancel.side", "Side", base.OCT),
    orig_cl_ord_id = ProtoField.string("order_cancel.orig_cl_ord_id", "OrigClOrdID"),
    transact_time = ProtoField.uint64("order_cancel.transact_time", "TransactTime", base.DEC),
    branch_id = ProtoField.string("order_cancel.branch_id", "BranchID"),
    user_info = ProtoField.string("order_cancel.user_info", "UserInfo"),
}

for _, field in pairs(fields) do
    sse_binary_proto.fields[field] = field
end

local function dissect_logon(buf, tree, offset)
    local subtree = tree:add(sse_binary_proto, buf(offset, 1), "Logon")
    subtree:add(fields.sender_comp_id, buf(offset, 32))
    offset = offset + 32
    subtree:add(fields.target_comp_id, buf(offset, 32))
    offset = offset + 32
    subtree:add(fields.heart_bt_int, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.prtcl_version, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.trade_date, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.q_size, buf(offset, 4))
    offset = offset + 4
end


local function dissect_new_order_single(buf, tree, offset)
    local subtree = tree:add(sse_binary_proto, buf(offset, 1), "NewOrderSingle")
    subtree:add(fields.biz_id, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.biz_pbu, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.cl_ord_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.security_id, buf(offset, 12))
    offset = offset + 12
    subtree:add(fields.account, buf(offset, 13))
    offset = offset + 13
    subtree:add(fields.owner_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.side, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.price, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.order_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.ord_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.time_in_force, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.transact_time, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.credit_tag, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.clearing_firm, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.branch_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.user_info, buf(offset, 32))
    offset = offset + 32
end


local function dissect_confirm(buf, tree, offset)
    local subtree = tree:add(sse_binary_proto, buf(offset, 1), "Confirm")
    subtree:add(fields.pbu, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.set_id, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.report_index, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.biz_id, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.exec_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.biz_pbu, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.cl_ord_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.security_id, buf(offset, 12))
    offset = offset + 12
    subtree:add(fields.account, buf(offset, 13))
    offset = offset + 13
    subtree:add(fields.owner_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.side, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.price, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.order_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.leaves_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.cxl_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.ord_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.time_in_force, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.ord_status, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.credit_tag, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.orig_cl_ord_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.clearing_firm, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.branch_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.ord_rej_reason, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.ord_cnfm_id, buf(offset, 16))
    offset = offset + 16
    subtree:add(fields.orig_ord_cnfm_id, buf(offset, 16))
    offset = offset + 16
    subtree:add(fields.trade_date, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.transact_time, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.user_info, buf(offset, 32))
    offset = offset + 32
end


local function dissect_report(buf, tree, offset)
    local subtree = tree:add(sse_binary_proto, buf(offset, 1), "Report")
    subtree:add(fields.pbu, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.set_id, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.report_index, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.biz_id, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.exec_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.biz_pbu, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.cl_ord_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.security_id, buf(offset, 12))
    offset = offset + 12
    subtree:add(fields.account, buf(offset, 13))
    offset = offset + 13
    subtree:add(fields.owner_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.side, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.price, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.order_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.leaves_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.cxl_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.ord_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.time_in_force, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.ord_status, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.credit_tag, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.orig_cl_ord_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.clearing_firm, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.branch_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.ord_rej_reason, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.ord_cnfm_id, buf(offset, 16))
    offset = offset + 16
    subtree:add(fields.orig_ord_cnfm_id, buf(offset, 16))
    offset = offset + 16
    subtree:add(fields.trade_date, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.transact_time, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.user_info, buf(offset, 32))
    offset = offset + 32
end


local function dissect_exec_rpt_sync(buf, tree, offset)
    local subtree = tree:add(sse_binary_proto, buf(offset, 1), "ExecRptSync")
    -- unsupported type: SubExecRptSync
end


local function dissect_exec_rpt_end_of_stream(buf, tree, offset)
    local subtree = tree:add(sse_binary_proto, buf(offset, 1), "ExecRptEndOfStream")
    subtree:add(fields.pbu, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.set_id, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.end_report_index, buf(offset, 8))
    offset = offset + 8
end


local function dissect_heartbeat(buf, tree, offset)
    local subtree = tree:add(sse_binary_proto, buf(offset, 1), "Heartbeat")
end


local function dissect_logout(buf, tree, offset)
    local subtree = tree:add(sse_binary_proto, buf(offset, 1), "Logout")
    subtree:add(fields.session_status, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.text, buf(offset, 64))
    offset = offset + 64
end


local function dissect_order_reject(buf, tree, offset)
    local subtree = tree:add(sse_binary_proto, buf(offset, 1), "OrderReject")
    subtree:add(fields.biz_id, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.biz_pbu, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.cl_ord_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.security_id, buf(offset, 12))
    offset = offset + 12
    subtree:add(fields.ord_rej_reason, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.trade_date, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.transact_time, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.user_info, buf(offset, 32))
    offset = offset + 32
end


local function dissect_platform_state(buf, tree, offset)
    local subtree = tree:add(sse_binary_proto, buf(offset, 1), "PlatformState")
    subtree:add(fields.platform_id, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.platform_state, buf(offset, 2))
    offset = offset + 2
end


local function dissect_order_cancel(buf, tree, offset)
    local subtree = tree:add(sse_binary_proto, buf(offset, 1), "OrderCancel")
    subtree:add(fields.biz_id, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.biz_pbu, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.cl_ord_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.security_id, buf(offset, 12))
    offset = offset + 12
    subtree:add(fields.account, buf(offset, 13))
    offset = offset + 13
    subtree:add(fields.owner_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.side, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.orig_cl_ord_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.transact_time, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.branch_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.user_info, buf(offset, 32))
    offset = offset + 32
end


local function dissect_cancel_reject(buf, tree, offset)
    local subtree = tree:add(sse_binary_proto, buf(offset, 1), "CancelReject")
    subtree:add(fields.pbu, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.set_id, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.report_index, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.biz_id, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.biz_pbu, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.cl_ord_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.security_id, buf(offset, 12))
    offset = offset + 12
    subtree:add(fields.orig_cl_ord_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.branch_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.cxl_rej_reason, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.trade_date, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.transact_time, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.user_info, buf(offset, 32))
    offset = offset + 32
end


local function dissect_exec_rpt_info(buf, tree, offset)
    local subtree = tree:add(sse_binary_proto, buf(offset, 1), "ExecRptInfo")
    subtree:add(fields.platform_id, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.pbu, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.set_id, buf(offset, 4))
    offset = offset + 4
end


local function dissect_exec_rpt_sync_rsp(buf, tree, offset)
    local subtree = tree:add(sse_binary_proto, buf(offset, 1), "ExecRptSyncRsp")
    -- unsupported type: SubExecRptSyncRsp
end


function sse_binary_proto.dissector(buf, pinfo, tree)
    pinfo.cols.protocol = "sse_binary"
    local offset = 0
    local msg_type = buf(offset, 4):uint()
    tree:add(fields.msg_type, buf(offset, 4))
    offset = offset + 4
    tree:add(fields.msg_seq_num, buf(offset, 8))
    offset = offset + 8
    tree:add(fields.msg_body_len, buf(offset, 4))
    offset = offset + 4
    if msg_type == 33 then -- Heartbeat
        dissect_heartbeat(buf, tree, offset)
        pinfo.cols.info:set("Heartbeat")
    elseif msg_type == 40 then -- Logon
        dissect_logon(buf, tree, offset)
        pinfo.cols.info:set("Logon")
    elseif msg_type == 41 then -- Logout
        dissect_logout(buf, tree, offset)
        pinfo.cols.info:set("Logout")
    elseif msg_type == 58 then -- NewOrderSingle
        dissect_new_order_single(buf, tree, offset)
        pinfo.cols.info:set("NewOrderSingle")
    elseif msg_type == 61 then -- OrderCancel
        dissect_order_cancel(buf, tree, offset)
        pinfo.cols.info:set("OrderCancel")
    elseif msg_type == 32 then -- Confirm
        dissect_confirm(buf, tree, offset)
        pinfo.cols.info:set("Confirm")
    elseif msg_type == 59 then -- CancelReject
        dissect_cancel_reject(buf, tree, offset)
        pinfo.cols.info:set("CancelReject")
    elseif msg_type == 103 then -- Report
        dissect_report(buf, tree, offset)
        pinfo.cols.info:set("Report")
    elseif msg_type == 204 then -- OrderReject
        dissect_order_reject(buf, tree, offset)
        pinfo.cols.info:set("OrderReject")
    elseif msg_type == 209 then -- PlatformState
        dissect_platform_state(buf, tree, offset)
        pinfo.cols.info:set("PlatformState")
    elseif msg_type == 208 then -- ExecRptInfo
        dissect_exec_rpt_info(buf, tree, offset)
        pinfo.cols.info:set("ExecRptInfo")
    elseif msg_type == 206 then -- ExecRptSync
        dissect_exec_rpt_sync(buf, tree, offset)
        pinfo.cols.info:set("ExecRptSync")
    elseif msg_type == 207 then -- ExecRptSyncRsp
        dissect_exec_rpt_sync_rsp(buf, tree, offset)
        pinfo.cols.info:set("ExecRptSyncRsp")
    elseif msg_type == 210 then -- ExecRptEndOfStream
        dissect_exec_rpt_end_of_stream(buf, tree, offset)
        pinfo.cols.info:set("ExecRptEndOfStream")
    end
    tree:add(fields.checksum, buf(offset, 4))
    offset = offset + 4
end

local tcp_table = DissectorTable.get("tcp.port")
tcp_table:add(8080, sse_binary_proto)
