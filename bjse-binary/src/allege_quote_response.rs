// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct AllegeQuoteResponse {
    pub partition_no: i32,
    pub report_index: i64,
    pub appl_id: String,
    pub reporting_pbuid: String,
    pub submitting_pbuid: String,
    pub security_id: String,
    pub security_id_source: String,
    pub owner_type: u16,
    pub clearing_firm: String,
    pub transact_time: i64,
    pub user_info: String,
    pub order_id: String,
    pub exec_id: String,
    pub cl_ord_id: String,
    pub account_id: String,
    pub quote_id: String,
    pub quote_resp_id: String,
    pub quote_resp_type: u8,
    pub private_quote: u8,
    pub order_qty: i64,
    pub price: i64,
    pub valid_until_time: i64,
    pub quote_type: u8,
    pub price_type: u8,
}

impl BinaryCodec for AllegeQuoteResponse {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_i32_le(self.partition_no);
        buf.put_i64_le(self.report_index);
        put_char_array(buf, &self.appl_id, 3);
        put_char_array(buf, &self.reporting_pbuid, 6);
        put_char_array(buf, &self.submitting_pbuid, 6);
        put_char_array(buf, &self.security_id, 8);
        put_char_array(buf, &self.security_id_source, 4);
        buf.put_u16_le(self.owner_type);
        put_char_array(buf, &self.clearing_firm, 2);
        buf.put_i64_le(self.transact_time);
        put_char_array(buf, &self.user_info, 32);
        put_char_array(buf, &self.order_id, 16);
        put_char_array(buf, &self.exec_id, 16);
        put_char_array(buf, &self.cl_ord_id, 10);
        put_char_array(buf, &self.account_id, 10);
        put_char_array(buf, &self.quote_id, 10);
        put_char_array(buf, &self.quote_resp_id, 10);
        buf.put_u8(self.quote_resp_type);
        buf.put_u8(self.private_quote);
        buf.put_i64_le(self.order_qty);
        buf.put_i64_le(self.price);
        buf.put_i64_le(self.valid_until_time);
        buf.put_u8(self.quote_type);
        buf.put_u8(self.price_type);
    }

    fn decode(buf: &mut Bytes) -> Option<AllegeQuoteResponse> {
        let partition_no = buf.get_i32_le();
        let report_index = buf.get_i64_le();
        let appl_id = get_char_array(buf, 3)?;
        let reporting_pbuid = get_char_array(buf, 6)?;
        let submitting_pbuid = get_char_array(buf, 6)?;
        let security_id = get_char_array(buf, 8)?;
        let security_id_source = get_char_array(buf, 4)?;
        let owner_type = buf.get_u16_le();
        let clearing_firm = get_char_array(buf, 2)?;
        let transact_time = buf.get_i64_le();
        let user_info = get_char_array(buf, 32)?;
        let order_id = get_char_array(buf, 16)?;
        let exec_id = get_char_array(buf, 16)?;
        let cl_ord_id = get_char_array(buf, 10)?;
        let account_id = get_char_array(buf, 10)?;
        let quote_id = get_char_array(buf, 10)?;
        let quote_resp_id = get_char_array(buf, 10)?;
        let quote_resp_type = buf.get_u8();
        let private_quote = buf.get_u8();
        let order_qty = buf.get_i64_le();
        let price = buf.get_i64_le();
        let valid_until_time = buf.get_i64_le();
        let quote_type = buf.get_u8();
        let price_type = buf.get_u8();
        Some(Self {
            partition_no,
            report_index,
            appl_id,
            reporting_pbuid,
            submitting_pbuid,
            security_id,
            security_id_source,
            owner_type,
            clearing_firm,
            transact_time,
            user_info,
            order_id,
            exec_id,
            cl_ord_id,
            account_id,
            quote_id,
            quote_resp_id,
            quote_resp_type,
            private_quote,
            order_qty,
            price,
            valid_until_time,
            quote_type,
            price_type,
        })
    }
}

#[cfg(test)]
mod allege_quote_response_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_allege_quote_response_codec() {
        let original = AllegeQuoteResponse {
            partition_no: -123456,
            report_index: -123456789,
            appl_id: vec!['a'; 3].into_iter().collect::<String>(),
            reporting_pbuid: vec!['a'; 6].into_iter().collect::<String>(),
            submitting_pbuid: vec!['a'; 6].into_iter().collect::<String>(),
            security_id: vec!['a'; 8].into_iter().collect::<String>(),
            security_id_source: vec!['a'; 4].into_iter().collect::<String>(),
            owner_type: 1234,
            clearing_firm: vec!['a'; 2].into_iter().collect::<String>(),
            transact_time: -123456789,
            user_info: vec!['a'; 32].into_iter().collect::<String>(),
            order_id: vec!['a'; 16].into_iter().collect::<String>(),
            exec_id: vec!['a'; 16].into_iter().collect::<String>(),
            cl_ord_id: vec!['a'; 10].into_iter().collect::<String>(),
            account_id: vec!['a'; 10].into_iter().collect::<String>(),
            quote_id: vec!['a'; 10].into_iter().collect::<String>(),
            quote_resp_id: vec!['a'; 10].into_iter().collect::<String>(),
            quote_resp_type: 42,
            private_quote: 42,
            order_qty: -123456789,
            price: -123456789,
            valid_until_time: -123456789,
            quote_type: 42,
            price_type: 42,
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = AllegeQuoteResponse::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
