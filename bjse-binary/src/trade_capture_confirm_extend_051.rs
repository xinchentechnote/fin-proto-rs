// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct TradeCaptureConfirmExtend051 {
    pub expiration_days: u16,
    pub expiration_type: u8,
    pub maturity_date: u32,
    pub share_property: String,
}

impl BinaryCodec for TradeCaptureConfirmExtend051 {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_u16_le(self.expiration_days);
        buf.put_u8(self.expiration_type);
        buf.put_u32_le(self.maturity_date);
        put_char_array(buf, &self.share_property, 2);
    }

    fn decode(buf: &mut Bytes) -> Option<TradeCaptureConfirmExtend051> {
        let expiration_days = buf.get_u16_le();
        let expiration_type = buf.get_u8();
        let maturity_date = buf.get_u32_le();
        let share_property = get_char_array(buf, 2)?;
        Some(Self {
            expiration_days,
            expiration_type,
            maturity_date,
            share_property,
        })
    }
}

#[cfg(test)]
mod trade_capture_confirm_extend_051_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_trade_capture_confirm_extend_051_codec() {
        let original = TradeCaptureConfirmExtend051 {
            expiration_days: 1234,
            expiration_type: 42,
            maturity_date: 123456,
            share_property: vec!['a'; 2].into_iter().collect::<String>(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = TradeCaptureConfirmExtend051::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
