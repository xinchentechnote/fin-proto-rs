// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct NoPartitions {
    pub partition_no: i32,
    pub partition_name: String,
}

impl BinaryCodec for NoPartitions {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_i32_le(self.partition_no);
        put_char_array(buf, &self.partition_name, 20);
    }

    fn decode(buf: &mut Bytes) -> Option<NoPartitions> {
        let partition_no = buf.get_i32_le();
        let partition_name = get_char_array(buf, 20)?;
        Some(Self {
            partition_no,
            partition_name,
        })
    }
}

#[cfg(test)]
mod no_partitions_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_no_partitions_codec() {
        let original = NoPartitions {
            partition_no: -123456,
            partition_name: vec!['a'; 20].into_iter().collect::<String>(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = NoPartitions::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct PlatformInfo {
    pub platform_id: u16,
    pub no_partitions: Vec<NoPartitions>,
}

impl BinaryCodec for PlatformInfo {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_u16_le(self.platform_id);
        put_object_list_le::<NoPartitions, u16>(buf, &self.no_partitions);
    }

    fn decode(buf: &mut Bytes) -> Option<PlatformInfo> {
        let platform_id = buf.get_u16_le();
        let no_partitions = get_object_list_le::<NoPartitions, u16>(buf)?;
        Some(Self {
            platform_id,
            no_partitions,
        })
    }
}

#[cfg(test)]
mod platform_info_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_platform_info_codec() {
        let original = PlatformInfo {
            platform_id: 1234,
            no_partitions: vec![],
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = PlatformInfo::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
