// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct Quote1 {
    pub quote_id: String,
    pub quote_price: i64,
    pub quote_qty: i64,
}

impl BinaryCodec for Quote1 {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.quote_id, 10);
        buf.put_i64_le(self.quote_price);
        buf.put_i64_le(self.quote_qty);
    }

    fn decode(buf: &mut Bytes) -> Option<Quote1> {
        let quote_id = get_char_array(buf, 10)?;
        let quote_price = buf.get_i64_le();
        let quote_qty = buf.get_i64_le();
        Some(Self {
            quote_id,
            quote_price,
            quote_qty,
        })
    }
}

#[cfg(test)]
mod quote_1_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_quote_1_codec() {
        let original = Quote1 {
            quote_id: vec!['a'; 10].into_iter().collect::<String>(),
            quote_price: -123456789,
            quote_qty: -123456789,
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = Quote1::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct QuoteStatusReportExtend070 {
    pub branch_id: String,
    pub order_id: String,
    pub exec_id: String,
    pub quote_resp_id: String,
    pub private_quote: u8,
    pub side: String,
    pub price_type: u8,
    pub valid_until_time: i64,
    pub cash_margin: String,
    pub counter_party_pbuid: String,
    pub memo: String,
    pub quote_1: Vec<Quote1>,
}

impl BinaryCodec for QuoteStatusReportExtend070 {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.branch_id, 2);
        put_char_array(buf, &self.order_id, 16);
        put_char_array(buf, &self.exec_id, 16);
        put_char_array(buf, &self.quote_resp_id, 10);
        buf.put_u8(self.private_quote);
        put_char_array(buf, &self.side, 1);
        buf.put_u8(self.price_type);
        buf.put_i64_le(self.valid_until_time);
        put_char_array(buf, &self.cash_margin, 1);
        put_char_array(buf, &self.counter_party_pbuid, 6);
        put_char_array(buf, &self.memo, 120);
        put_object_list_le::<Quote1, u16>(buf, &self.quote_1);
    }

    fn decode(buf: &mut Bytes) -> Option<QuoteStatusReportExtend070> {
        let branch_id = get_char_array(buf, 2)?;
        let order_id = get_char_array(buf, 16)?;
        let exec_id = get_char_array(buf, 16)?;
        let quote_resp_id = get_char_array(buf, 10)?;
        let private_quote = buf.get_u8();
        let side = get_char_array(buf, 1)?;
        let price_type = buf.get_u8();
        let valid_until_time = buf.get_i64_le();
        let cash_margin = get_char_array(buf, 1)?;
        let counter_party_pbuid = get_char_array(buf, 6)?;
        let memo = get_char_array(buf, 120)?;
        let quote_1 = get_object_list_le::<Quote1, u16>(buf)?;
        Some(Self {
            branch_id,
            order_id,
            exec_id,
            quote_resp_id,
            private_quote,
            side,
            price_type,
            valid_until_time,
            cash_margin,
            counter_party_pbuid,
            memo,
            quote_1,
        })
    }
}

#[cfg(test)]
mod quote_status_report_extend_070_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_quote_status_report_extend_070_codec() {
        let original = QuoteStatusReportExtend070 {
            branch_id: vec!['a'; 2].into_iter().collect::<String>(),
            order_id: vec!['a'; 16].into_iter().collect::<String>(),
            exec_id: vec!['a'; 16].into_iter().collect::<String>(),
            quote_resp_id: vec!['a'; 10].into_iter().collect::<String>(),
            private_quote: 42,
            side: vec!['a'; 1].into_iter().collect::<String>(),
            price_type: 42,
            valid_until_time: -123456789,
            cash_margin: vec!['a'; 1].into_iter().collect::<String>(),
            counter_party_pbuid: vec!['a'; 6].into_iter().collect::<String>(),
            memo: vec!['a'; 120].into_iter().collect::<String>(),
            quote_1: vec![],
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = QuoteStatusReportExtend070::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
