// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct AllegeQuoteExtend070 {
    pub cash_margin: String,
    pub counter_party_pbuid: String,
}

impl BinaryCodec for AllegeQuoteExtend070 {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.cash_margin, 1);
        put_char_array(buf, &self.counter_party_pbuid, 6);
    }

    fn decode(buf: &mut Bytes) -> Option<AllegeQuoteExtend070> {
        let cash_margin = get_char_array(buf, 1)?;
        let counter_party_pbuid = get_char_array(buf, 6)?;
        Some(Self {
            cash_margin,
            counter_party_pbuid,
        })
    }
}

#[cfg(test)]
mod allege_quote_extend_070_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_allege_quote_extend_070_codec() {
        let original = AllegeQuoteExtend070 {
            cash_margin: vec!['a'; 1].into_iter().collect::<String>(),
            counter_party_pbuid: vec!['a'; 6].into_iter().collect::<String>(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = AllegeQuoteExtend070::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
