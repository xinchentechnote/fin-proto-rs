// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct TradingSessionStatus {
    pub market_id: String,
    pub market_segment_id: String,
    pub trading_session_id: String,
    pub trading_session_sub_id: String,
    pub trad_ses_status: u8,
    pub trad_ses_start_time: i64,
}

impl BinaryCodec for TradingSessionStatus {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.market_id, 3);
        put_char_array(buf, &self.market_segment_id, 3);
        put_char_array(buf, &self.trading_session_id, 3);
        put_char_array(buf, &self.trading_session_sub_id, 3);
        buf.put_u8(self.trad_ses_status);
        buf.put_i64_le(self.trad_ses_start_time);
    }

    fn decode(buf: &mut Bytes) -> Option<TradingSessionStatus> {
        let market_id = get_char_array(buf, 3)?;
        let market_segment_id = get_char_array(buf, 3)?;
        let trading_session_id = get_char_array(buf, 3)?;
        let trading_session_sub_id = get_char_array(buf, 3)?;
        let trad_ses_status = buf.get_u8();
        let trad_ses_start_time = buf.get_i64_le();
        Some(Self {
            market_id,
            market_segment_id,
            trading_session_id,
            trading_session_sub_id,
            trad_ses_status,
            trad_ses_start_time,
        })
    }
}

#[cfg(test)]
mod trading_session_status_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_trading_session_status_codec() {
        let original = TradingSessionStatus {
            market_id: vec!['a'; 3].into_iter().collect::<String>(),
            market_segment_id: vec!['a'; 3].into_iter().collect::<String>(),
            trading_session_id: vec!['a'; 3].into_iter().collect::<String>(),
            trading_session_sub_id: vec!['a'; 3].into_iter().collect::<String>(),
            trad_ses_status: 42,
            trad_ses_start_time: -123456789,
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = TradingSessionStatus::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
