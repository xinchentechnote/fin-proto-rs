// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

use crate::trade_capture_report_extend_031::*;
use crate::trade_capture_report_extend_051::*;
use crate::trade_capture_report_extend_060::*;
use crate::trade_capture_report_extend_061::*;
use crate::trade_capture_report_extend_062::*;

#[derive(Debug, Clone, PartialEq)]
pub enum TradeCaptureReportApplExtendEnum {
    TradeCaptureReportExtend031(TradeCaptureReportExtend031),
    TradeCaptureReportExtend051(TradeCaptureReportExtend051),
    TradeCaptureReportExtend060(TradeCaptureReportExtend060),
    TradeCaptureReportExtend061(TradeCaptureReportExtend061),
    TradeCaptureReportExtend062(TradeCaptureReportExtend062),
}

#[derive(Debug, Clone, PartialEq)]
pub struct TradeCaptureReport {
    pub appl_id: String,
    pub submitting_pbuid: String,
    pub security_id: String,
    pub security_id_source: String,
    pub owner_type: u16,
    pub clearing_firm: String,
    pub transact_time: i64,
    pub user_info: String,
    pub trade_report_id: String,
    pub trade_report_type: u8,
    pub trade_report_trans_type: u8,
    pub trade_handling_instr: String,
    pub trade_report_ref_id: String,
    pub last_px: i64,
    pub last_qty: i64,
    pub trd_type: u16,
    pub trd_sub_type: u16,
    pub confirm_id: u32,
    pub side: String,
    pub pbuid: String,
    pub account_id: String,
    pub branch_id: String,
    pub counter_party_pbuid: String,
    pub counter_party_account_id: String,
    pub counter_party_branch_id: String,
    pub appl_extend: TradeCaptureReportApplExtendEnum,
}

impl BinaryCodec for TradeCaptureReport {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.appl_id, 3);
        put_char_array(buf, &self.submitting_pbuid, 6);
        put_char_array(buf, &self.security_id, 8);
        put_char_array(buf, &self.security_id_source, 4);
        buf.put_u16_le(self.owner_type);
        put_char_array(buf, &self.clearing_firm, 2);
        buf.put_i64_le(self.transact_time);
        put_char_array(buf, &self.user_info, 32);
        put_char_array(buf, &self.trade_report_id, 10);
        buf.put_u8(self.trade_report_type);
        buf.put_u8(self.trade_report_trans_type);
        put_char_array(buf, &self.trade_handling_instr, 1);
        put_char_array(buf, &self.trade_report_ref_id, 10);
        buf.put_i64_le(self.last_px);
        buf.put_i64_le(self.last_qty);
        buf.put_u16_le(self.trd_type);
        buf.put_u16_le(self.trd_sub_type);
        buf.put_u32_le(self.confirm_id);
        put_char_array(buf, &self.side, 1);
        put_char_array(buf, &self.pbuid, 6);
        put_char_array(buf, &self.account_id, 10);
        put_char_array(buf, &self.branch_id, 2);
        put_char_array(buf, &self.counter_party_pbuid, 6);
        put_char_array(buf, &self.counter_party_account_id, 10);
        put_char_array(buf, &self.counter_party_branch_id, 2);
        match &self.appl_extend {
            TradeCaptureReportApplExtendEnum::TradeCaptureReportExtend031(msg) => msg.encode(buf),
            TradeCaptureReportApplExtendEnum::TradeCaptureReportExtend051(msg) => msg.encode(buf),
            TradeCaptureReportApplExtendEnum::TradeCaptureReportExtend060(msg) => msg.encode(buf),
            TradeCaptureReportApplExtendEnum::TradeCaptureReportExtend061(msg) => msg.encode(buf),
            TradeCaptureReportApplExtendEnum::TradeCaptureReportExtend062(msg) => msg.encode(buf),
        }
    }

    fn decode(buf: &mut Bytes) -> Option<TradeCaptureReport> {
        let appl_id = get_char_array(buf, 3)?;
        let submitting_pbuid = get_char_array(buf, 6)?;
        let security_id = get_char_array(buf, 8)?;
        let security_id_source = get_char_array(buf, 4)?;
        let owner_type = buf.get_u16_le();
        let clearing_firm = get_char_array(buf, 2)?;
        let transact_time = buf.get_i64_le();
        let user_info = get_char_array(buf, 32)?;
        let trade_report_id = get_char_array(buf, 10)?;
        let trade_report_type = buf.get_u8();
        let trade_report_trans_type = buf.get_u8();
        let trade_handling_instr = get_char_array(buf, 1)?;
        let trade_report_ref_id = get_char_array(buf, 10)?;
        let last_px = buf.get_i64_le();
        let last_qty = buf.get_i64_le();
        let trd_type = buf.get_u16_le();
        let trd_sub_type = buf.get_u16_le();
        let confirm_id = buf.get_u32_le();
        let side = get_char_array(buf, 1)?;
        let pbuid = get_char_array(buf, 6)?;
        let account_id = get_char_array(buf, 10)?;
        let branch_id = get_char_array(buf, 2)?;
        let counter_party_pbuid = get_char_array(buf, 6)?;
        let counter_party_account_id = get_char_array(buf, 10)?;
        let counter_party_branch_id = get_char_array(buf, 2)?;
        let appl_extend = match appl_id.as_str() {
            "031" => TradeCaptureReportApplExtendEnum::TradeCaptureReportExtend031(
                TradeCaptureReportExtend031::decode(buf)?,
            ),
            "051" => TradeCaptureReportApplExtendEnum::TradeCaptureReportExtend051(
                TradeCaptureReportExtend051::decode(buf)?,
            ),
            "060" => TradeCaptureReportApplExtendEnum::TradeCaptureReportExtend060(
                TradeCaptureReportExtend060::decode(buf)?,
            ),
            "061" => TradeCaptureReportApplExtendEnum::TradeCaptureReportExtend061(
                TradeCaptureReportExtend061::decode(buf)?,
            ),
            "062" => TradeCaptureReportApplExtendEnum::TradeCaptureReportExtend062(
                TradeCaptureReportExtend062::decode(buf)?,
            ),
            _ => return None,
        };
        Some(Self {
            appl_id,
            submitting_pbuid,
            security_id,
            security_id_source,
            owner_type,
            clearing_firm,
            transact_time,
            user_info,
            trade_report_id,
            trade_report_type,
            trade_report_trans_type,
            trade_handling_instr,
            trade_report_ref_id,
            last_px,
            last_qty,
            trd_type,
            trd_sub_type,
            confirm_id,
            side,
            pbuid,
            account_id,
            branch_id,
            counter_party_pbuid,
            counter_party_account_id,
            counter_party_branch_id,
            appl_extend,
        })
    }
}

#[cfg(test)]
mod trade_capture_report_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_trade_capture_report_codec() {
        let original = TradeCaptureReport {
            submitting_pbuid: vec!['a'; 6].into_iter().collect::<String>(),
            security_id: vec!['a'; 8].into_iter().collect::<String>(),
            security_id_source: vec!['a'; 4].into_iter().collect::<String>(),
            owner_type: 1234,
            clearing_firm: vec!['a'; 2].into_iter().collect::<String>(),
            transact_time: -123456789,
            user_info: vec!['a'; 32].into_iter().collect::<String>(),
            trade_report_id: vec!['a'; 10].into_iter().collect::<String>(),
            trade_report_type: 42,
            trade_report_trans_type: 42,
            trade_handling_instr: vec!['a'; 1].into_iter().collect::<String>(),
            trade_report_ref_id: vec!['a'; 10].into_iter().collect::<String>(),
            last_px: -123456789,
            last_qty: -123456789,
            trd_type: 1234,
            trd_sub_type: 1234,
            confirm_id: 123456,
            side: vec!['a'; 1].into_iter().collect::<String>(),
            pbuid: vec!['a'; 6].into_iter().collect::<String>(),
            account_id: vec!['a'; 10].into_iter().collect::<String>(),
            branch_id: vec!['a'; 2].into_iter().collect::<String>(),
            counter_party_pbuid: vec!['a'; 6].into_iter().collect::<String>(),
            counter_party_account_id: vec!['a'; 10].into_iter().collect::<String>(),
            counter_party_branch_id: vec!['a'; 2].into_iter().collect::<String>(),
            appl_id: "031".to_string(),
            appl_extend: TradeCaptureReportApplExtendEnum::TradeCaptureReportExtend031(
                TradeCaptureReportExtend031 {
                    member_id: vec!['a'; 6].into_iter().collect::<String>(),
                    trader_code: vec!['a'; 5].into_iter().collect::<String>(),
                    counter_party_member_id: vec!['a'; 6].into_iter().collect::<String>(),
                    counter_party_trader_code: vec!['a'; 5].into_iter().collect::<String>(),
                    settl_type: vec!['a'; 1].into_iter().collect::<String>(),
                    settl_period: vec!['a'; 1].into_iter().collect::<String>(),
                    cash_margin: vec!['a'; 1].into_iter().collect::<String>(),
                    memo: vec!['a'; 120].into_iter().collect::<String>(),
                },
            ),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = TradeCaptureReport::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
