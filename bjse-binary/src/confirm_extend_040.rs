// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct ConfirmExtend040 {
    pub stop_px: i64,
    pub min_qty: i64,
    pub max_price_levels: u16,
    pub time_in_force: String,
    pub cash_margin: String,
}

impl BinaryCodec for ConfirmExtend040 {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_i64_le(self.stop_px);
        buf.put_i64_le(self.min_qty);
        buf.put_u16_le(self.max_price_levels);
        put_char_array(buf, &self.time_in_force, 1);
        put_char_array(buf, &self.cash_margin, 1);
    }

    fn decode(buf: &mut Bytes) -> Option<ConfirmExtend040> {
        let stop_px = buf.get_i64_le();
        let min_qty = buf.get_i64_le();
        let max_price_levels = buf.get_u16_le();
        let time_in_force = get_char_array(buf, 1)?;
        let cash_margin = get_char_array(buf, 1)?;
        Some(Self {
            stop_px,
            min_qty,
            max_price_levels,
            time_in_force,
            cash_margin,
        })
    }
}

#[cfg(test)]
mod confirm_extend_040_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_confirm_extend_040_codec() {
        let original = ConfirmExtend040 {
            stop_px: -123456789,
            min_qty: -123456789,
            max_price_levels: 1234,
            time_in_force: vec!['a'; 1].into_iter().collect::<String>(),
            cash_margin: vec!['a'; 1].into_iter().collect::<String>(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = ConfirmExtend040::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
