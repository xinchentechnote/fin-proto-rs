// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

use crate::confirm_extend_010::*;
use crate::confirm_extend_040::*;
use crate::confirm_extend_041::*;
use crate::confirm_extend_042::*;
use crate::confirm_extend_043::*;
use crate::confirm_extend_044::*;
use crate::confirm_extend_045::*;
use crate::confirm_extend_050::*;

#[derive(Debug, Clone, PartialEq)]
pub enum ExecutionConfirmApplExtendEnum {
    ConfirmExtend010(ConfirmExtend010),
    ConfirmExtend040(ConfirmExtend040),
    ConfirmExtend041(ConfirmExtend041),
    ConfirmExtend042(ConfirmExtend042),
    ConfirmExtend043(ConfirmExtend043),
    ConfirmExtend044(ConfirmExtend044),
    ConfirmExtend045(ConfirmExtend045),
    ConfirmExtend050(ConfirmExtend050),
}

#[derive(Debug, Clone, PartialEq)]
pub struct ExecutionConfirm {
    pub partition_no: i32,
    pub report_index: i64,
    pub appl_id: String,
    pub reporting_pbuid: String,
    pub submitting_pbuid: String,
    pub security_id: String,
    pub security_id_source: String,
    pub owner_type: u16,
    pub clearing_firm: String,
    pub transact_time: i64,
    pub user_info: String,
    pub order_id: String,
    pub cl_ord_id: String,
    pub orig_cl_ord_id: String,
    pub exec_id: String,
    pub exec_type: String,
    pub ord_status: String,
    pub ord_rej_reason: u16,
    pub leaves_qty: i64,
    pub cum_qty: i64,
    pub side: String,
    pub ord_type: String,
    pub order_qty: i64,
    pub price: i64,
    pub account_id: String,
    pub branch_id: String,
    pub order_restrictions: String,
    pub appl_extend: ExecutionConfirmApplExtendEnum,
}

impl BinaryCodec for ExecutionConfirm {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_i32_le(self.partition_no);
        buf.put_i64_le(self.report_index);
        put_char_array(buf, &self.appl_id, 3);
        put_char_array(buf, &self.reporting_pbuid, 6);
        put_char_array(buf, &self.submitting_pbuid, 6);
        put_char_array(buf, &self.security_id, 8);
        put_char_array(buf, &self.security_id_source, 4);
        buf.put_u16_le(self.owner_type);
        put_char_array(buf, &self.clearing_firm, 2);
        buf.put_i64_le(self.transact_time);
        put_char_array(buf, &self.user_info, 32);
        put_char_array(buf, &self.order_id, 16);
        put_char_array(buf, &self.cl_ord_id, 10);
        put_char_array(buf, &self.orig_cl_ord_id, 10);
        put_char_array(buf, &self.exec_id, 16);
        put_char_array(buf, &self.exec_type, 1);
        put_char_array(buf, &self.ord_status, 1);
        buf.put_u16_le(self.ord_rej_reason);
        buf.put_i64_le(self.leaves_qty);
        buf.put_i64_le(self.cum_qty);
        put_char_array(buf, &self.side, 1);
        put_char_array(buf, &self.ord_type, 1);
        buf.put_i64_le(self.order_qty);
        buf.put_i64_le(self.price);
        put_char_array(buf, &self.account_id, 10);
        put_char_array(buf, &self.branch_id, 2);
        put_char_array(buf, &self.order_restrictions, 4);
        match &self.appl_extend {
            ExecutionConfirmApplExtendEnum::ConfirmExtend010(msg) => msg.encode(buf),
            ExecutionConfirmApplExtendEnum::ConfirmExtend040(msg) => msg.encode(buf),
            ExecutionConfirmApplExtendEnum::ConfirmExtend041(msg) => msg.encode(buf),
            ExecutionConfirmApplExtendEnum::ConfirmExtend042(msg) => msg.encode(buf),
            ExecutionConfirmApplExtendEnum::ConfirmExtend043(msg) => msg.encode(buf),
            ExecutionConfirmApplExtendEnum::ConfirmExtend044(msg) => msg.encode(buf),
            ExecutionConfirmApplExtendEnum::ConfirmExtend045(msg) => msg.encode(buf),
            ExecutionConfirmApplExtendEnum::ConfirmExtend050(msg) => msg.encode(buf),
        }
    }

    fn decode(buf: &mut Bytes) -> Option<ExecutionConfirm> {
        let partition_no = buf.get_i32_le();
        let report_index = buf.get_i64_le();
        let appl_id = get_char_array(buf, 3)?;
        let reporting_pbuid = get_char_array(buf, 6)?;
        let submitting_pbuid = get_char_array(buf, 6)?;
        let security_id = get_char_array(buf, 8)?;
        let security_id_source = get_char_array(buf, 4)?;
        let owner_type = buf.get_u16_le();
        let clearing_firm = get_char_array(buf, 2)?;
        let transact_time = buf.get_i64_le();
        let user_info = get_char_array(buf, 32)?;
        let order_id = get_char_array(buf, 16)?;
        let cl_ord_id = get_char_array(buf, 10)?;
        let orig_cl_ord_id = get_char_array(buf, 10)?;
        let exec_id = get_char_array(buf, 16)?;
        let exec_type = get_char_array(buf, 1)?;
        let ord_status = get_char_array(buf, 1)?;
        let ord_rej_reason = buf.get_u16_le();
        let leaves_qty = buf.get_i64_le();
        let cum_qty = buf.get_i64_le();
        let side = get_char_array(buf, 1)?;
        let ord_type = get_char_array(buf, 1)?;
        let order_qty = buf.get_i64_le();
        let price = buf.get_i64_le();
        let account_id = get_char_array(buf, 10)?;
        let branch_id = get_char_array(buf, 2)?;
        let order_restrictions = get_char_array(buf, 4)?;
        let appl_extend = match appl_id.as_str() {
            "010" => {
                ExecutionConfirmApplExtendEnum::ConfirmExtend010(ConfirmExtend010::decode(buf)?)
            }
            "040" => {
                ExecutionConfirmApplExtendEnum::ConfirmExtend040(ConfirmExtend040::decode(buf)?)
            }
            "041" => {
                ExecutionConfirmApplExtendEnum::ConfirmExtend041(ConfirmExtend041::decode(buf)?)
            }
            "042" => {
                ExecutionConfirmApplExtendEnum::ConfirmExtend042(ConfirmExtend042::decode(buf)?)
            }
            "043" => {
                ExecutionConfirmApplExtendEnum::ConfirmExtend043(ConfirmExtend043::decode(buf)?)
            }
            "044" => {
                ExecutionConfirmApplExtendEnum::ConfirmExtend044(ConfirmExtend044::decode(buf)?)
            }
            "045" => {
                ExecutionConfirmApplExtendEnum::ConfirmExtend045(ConfirmExtend045::decode(buf)?)
            }
            "050" => {
                ExecutionConfirmApplExtendEnum::ConfirmExtend050(ConfirmExtend050::decode(buf)?)
            }
            _ => return None,
        };
        Some(Self {
            partition_no,
            report_index,
            appl_id,
            reporting_pbuid,
            submitting_pbuid,
            security_id,
            security_id_source,
            owner_type,
            clearing_firm,
            transact_time,
            user_info,
            order_id,
            cl_ord_id,
            orig_cl_ord_id,
            exec_id,
            exec_type,
            ord_status,
            ord_rej_reason,
            leaves_qty,
            cum_qty,
            side,
            ord_type,
            order_qty,
            price,
            account_id,
            branch_id,
            order_restrictions,
            appl_extend,
        })
    }
}

#[cfg(test)]
mod execution_confirm_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_execution_confirm_codec() {
        let original = ExecutionConfirm {
            partition_no: -123456,
            report_index: -123456789,
            reporting_pbuid: vec!['a'; 6].into_iter().collect::<String>(),
            submitting_pbuid: vec!['a'; 6].into_iter().collect::<String>(),
            security_id: vec!['a'; 8].into_iter().collect::<String>(),
            security_id_source: vec!['a'; 4].into_iter().collect::<String>(),
            owner_type: 1234,
            clearing_firm: vec!['a'; 2].into_iter().collect::<String>(),
            transact_time: -123456789,
            user_info: vec!['a'; 32].into_iter().collect::<String>(),
            order_id: vec!['a'; 16].into_iter().collect::<String>(),
            cl_ord_id: vec!['a'; 10].into_iter().collect::<String>(),
            orig_cl_ord_id: vec!['a'; 10].into_iter().collect::<String>(),
            exec_id: vec!['a'; 16].into_iter().collect::<String>(),
            exec_type: vec!['a'; 1].into_iter().collect::<String>(),
            ord_status: vec!['a'; 1].into_iter().collect::<String>(),
            ord_rej_reason: 1234,
            leaves_qty: -123456789,
            cum_qty: -123456789,
            side: vec!['a'; 1].into_iter().collect::<String>(),
            ord_type: vec!['a'; 1].into_iter().collect::<String>(),
            order_qty: -123456789,
            price: -123456789,
            account_id: vec!['a'; 10].into_iter().collect::<String>(),
            branch_id: vec!['a'; 2].into_iter().collect::<String>(),
            order_restrictions: vec!['a'; 4].into_iter().collect::<String>(),
            appl_id: "010".to_string(),
            appl_extend: ExecutionConfirmApplExtendEnum::ConfirmExtend010(ConfirmExtend010 {
                stop_px: -123456789,
                min_qty: -123456789,
                max_price_levels: 1234,
                time_in_force: vec!['a'; 1].into_iter().collect::<String>(),
                cash_margin: vec!['a'; 1].into_iter().collect::<String>(),
            }),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = ExecutionConfirm::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
