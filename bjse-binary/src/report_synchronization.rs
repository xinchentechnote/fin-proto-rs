// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct ReportPartitionSync {
    pub partition_no: i32,
    pub report_index: i64,
}

impl BinaryCodec for ReportPartitionSync {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_i32_le(self.partition_no);
        buf.put_i64_le(self.report_index);
    }

    fn decode(buf: &mut Bytes) -> Option<ReportPartitionSync> {
        let partition_no = buf.get_i32_le();
        let report_index = buf.get_i64_le();
        Some(Self {
            partition_no,
            report_index,
        })
    }
}

#[cfg(test)]
mod report_partition_sync_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_report_partition_sync_codec() {
        let original = ReportPartitionSync {
            partition_no: -123456,
            report_index: -123456789,
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = ReportPartitionSync::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct ReportSynchronization {
    pub report_partition_sync: Vec<ReportPartitionSync>,
}

impl BinaryCodec for ReportSynchronization {
    fn encode(&self, buf: &mut BytesMut) {
        put_object_list_le::<ReportPartitionSync, u16>(buf, &self.report_partition_sync);
    }

    fn decode(buf: &mut Bytes) -> Option<ReportSynchronization> {
        let report_partition_sync = get_object_list_le::<ReportPartitionSync, u16>(buf)?;
        Some(Self {
            report_partition_sync,
        })
    }
}

#[cfg(test)]
mod report_synchronization_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_report_synchronization_codec() {
        let original = ReportSynchronization {
            report_partition_sync: vec![],
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = ReportSynchronization::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
