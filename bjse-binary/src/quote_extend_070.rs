// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct QuoteExtend070 {
    pub branch_id: String,
    pub quote_id: String,
    pub quote_resp_id: String,
    pub private_quote: u8,
    pub valid_until_time: i64,
    pub price_type: u8,
    pub cash_margin: String,
    pub counter_party_pbuid: String,
    pub memo: String,
}

impl BinaryCodec for QuoteExtend070 {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.branch_id, 2);
        put_char_array(buf, &self.quote_id, 10);
        put_char_array(buf, &self.quote_resp_id, 10);
        buf.put_u8(self.private_quote);
        buf.put_i64_le(self.valid_until_time);
        buf.put_u8(self.price_type);
        put_char_array(buf, &self.cash_margin, 1);
        put_char_array(buf, &self.counter_party_pbuid, 6);
        put_char_array(buf, &self.memo, 120);
    }

    fn decode(buf: &mut Bytes) -> Option<QuoteExtend070> {
        let branch_id = get_char_array(buf, 2)?;
        let quote_id = get_char_array(buf, 10)?;
        let quote_resp_id = get_char_array(buf, 10)?;
        let private_quote = buf.get_u8();
        let valid_until_time = buf.get_i64_le();
        let price_type = buf.get_u8();
        let cash_margin = get_char_array(buf, 1)?;
        let counter_party_pbuid = get_char_array(buf, 6)?;
        let memo = get_char_array(buf, 120)?;
        Some(Self {
            branch_id,
            quote_id,
            quote_resp_id,
            private_quote,
            valid_until_time,
            price_type,
            cash_margin,
            counter_party_pbuid,
            memo,
        })
    }
}

#[cfg(test)]
mod quote_extend_070_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_quote_extend_070_codec() {
        let original = QuoteExtend070 {
            branch_id: vec!['a'; 2].into_iter().collect::<String>(),
            quote_id: vec!['a'; 10].into_iter().collect::<String>(),
            quote_resp_id: vec!['a'; 10].into_iter().collect::<String>(),
            private_quote: 42,
            valid_until_time: -123456789,
            price_type: 42,
            cash_margin: vec!['a'; 1].into_iter().collect::<String>(),
            counter_party_pbuid: vec!['a'; 6].into_iter().collect::<String>(),
            memo: vec!['a'; 120].into_iter().collect::<String>(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = QuoteExtend070::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
