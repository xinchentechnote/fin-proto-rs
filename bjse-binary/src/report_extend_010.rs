// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct ReportExtend010 {
    pub cash_margin: String,
    pub settl_type: String,
    pub settl_period: String,
}

impl BinaryCodec for ReportExtend010 {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.cash_margin, 1);
        put_char_array(buf, &self.settl_type, 1);
        put_char_array(buf, &self.settl_period, 1);
    }

    fn decode(buf: &mut Bytes) -> Option<ReportExtend010> {
        let cash_margin = get_char_array(buf, 1)?;
        let settl_type = get_char_array(buf, 1)?;
        let settl_period = get_char_array(buf, 1)?;
        Some(Self {
            cash_margin,
            settl_type,
            settl_period,
        })
    }
}

#[cfg(test)]
mod report_extend_010_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_report_extend_010_codec() {
        let original = ReportExtend010 {
            cash_margin: vec!['a'; 1].into_iter().collect::<String>(),
            settl_type: vec!['a'; 1].into_iter().collect::<String>(),
            settl_period: vec!['a'; 1].into_iter().collect::<String>(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = ReportExtend010::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
