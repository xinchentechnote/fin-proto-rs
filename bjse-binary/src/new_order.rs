// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

use crate::extend_new_order_010::*;
use crate::extend_new_order_040::*;
use crate::extend_new_order_041::*;
use crate::extend_new_order_042::*;
use crate::extend_new_order_043::*;
use crate::extend_new_order_044::*;
use crate::extend_new_order_045::*;
use crate::extend_new_order_050::*;

#[derive(Debug, Clone, PartialEq)]
pub enum NewOrderApplExtendEnum {
    ExtendNewOrder010(ExtendNewOrder010),
    ExtendNewOrder040(ExtendNewOrder040),
    ExtendNewOrder041(ExtendNewOrder041),
    ExtendNewOrder042(ExtendNewOrder042),
    ExtendNewOrder043(ExtendNewOrder043),
    ExtendNewOrder044(ExtendNewOrder044),
    ExtendNewOrder045(ExtendNewOrder045),
    ExtendNewOrder050(ExtendNewOrder050),
}

#[derive(Debug, Clone, PartialEq)]
pub struct NewOrder {
    pub appl_id: String,
    pub submitting_pbuid: String,
    pub security_id: String,
    pub security_id_source: String,
    pub owner_type: u16,
    pub clearing_firm: String,
    pub transact_time: i64,
    pub user_info: String,
    pub cl_ord_id: String,
    pub account_id: String,
    pub branch_id: String,
    pub order_restrictions: String,
    pub side: String,
    pub ord_type: String,
    pub order_qty: i64,
    pub price: i64,
    pub appl_extend: NewOrderApplExtendEnum,
}

impl BinaryCodec for NewOrder {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.appl_id, 3);
        put_char_array(buf, &self.submitting_pbuid, 6);
        put_char_array(buf, &self.security_id, 8);
        put_char_array(buf, &self.security_id_source, 4);
        buf.put_u16_le(self.owner_type);
        put_char_array(buf, &self.clearing_firm, 2);
        buf.put_i64_le(self.transact_time);
        put_char_array(buf, &self.user_info, 32);
        put_char_array(buf, &self.cl_ord_id, 10);
        put_char_array(buf, &self.account_id, 10);
        put_char_array(buf, &self.branch_id, 2);
        put_char_array(buf, &self.order_restrictions, 4);
        put_char_array(buf, &self.side, 1);
        put_char_array(buf, &self.ord_type, 1);
        buf.put_i64_le(self.order_qty);
        buf.put_i64_le(self.price);
        match &self.appl_extend {
            NewOrderApplExtendEnum::ExtendNewOrder010(msg) => msg.encode(buf),
            NewOrderApplExtendEnum::ExtendNewOrder040(msg) => msg.encode(buf),
            NewOrderApplExtendEnum::ExtendNewOrder041(msg) => msg.encode(buf),
            NewOrderApplExtendEnum::ExtendNewOrder042(msg) => msg.encode(buf),
            NewOrderApplExtendEnum::ExtendNewOrder043(msg) => msg.encode(buf),
            NewOrderApplExtendEnum::ExtendNewOrder044(msg) => msg.encode(buf),
            NewOrderApplExtendEnum::ExtendNewOrder045(msg) => msg.encode(buf),
            NewOrderApplExtendEnum::ExtendNewOrder050(msg) => msg.encode(buf),
        }
    }

    fn decode(buf: &mut Bytes) -> Option<NewOrder> {
        let appl_id = get_char_array(buf, 3)?;
        let submitting_pbuid = get_char_array(buf, 6)?;
        let security_id = get_char_array(buf, 8)?;
        let security_id_source = get_char_array(buf, 4)?;
        let owner_type = buf.get_u16_le();
        let clearing_firm = get_char_array(buf, 2)?;
        let transact_time = buf.get_i64_le();
        let user_info = get_char_array(buf, 32)?;
        let cl_ord_id = get_char_array(buf, 10)?;
        let account_id = get_char_array(buf, 10)?;
        let branch_id = get_char_array(buf, 2)?;
        let order_restrictions = get_char_array(buf, 4)?;
        let side = get_char_array(buf, 1)?;
        let ord_type = get_char_array(buf, 1)?;
        let order_qty = buf.get_i64_le();
        let price = buf.get_i64_le();
        let appl_extend = match appl_id.as_str() {
            "010" => NewOrderApplExtendEnum::ExtendNewOrder010(ExtendNewOrder010::decode(buf)?),
            "040" => NewOrderApplExtendEnum::ExtendNewOrder040(ExtendNewOrder040::decode(buf)?),
            "041" => NewOrderApplExtendEnum::ExtendNewOrder041(ExtendNewOrder041::decode(buf)?),
            "042" => NewOrderApplExtendEnum::ExtendNewOrder042(ExtendNewOrder042::decode(buf)?),
            "043" => NewOrderApplExtendEnum::ExtendNewOrder043(ExtendNewOrder043::decode(buf)?),
            "044" => NewOrderApplExtendEnum::ExtendNewOrder044(ExtendNewOrder044::decode(buf)?),
            "045" => NewOrderApplExtendEnum::ExtendNewOrder045(ExtendNewOrder045::decode(buf)?),
            "050" => NewOrderApplExtendEnum::ExtendNewOrder050(ExtendNewOrder050::decode(buf)?),
            _ => return None,
        };
        Some(Self {
            appl_id,
            submitting_pbuid,
            security_id,
            security_id_source,
            owner_type,
            clearing_firm,
            transact_time,
            user_info,
            cl_ord_id,
            account_id,
            branch_id,
            order_restrictions,
            side,
            ord_type,
            order_qty,
            price,
            appl_extend,
        })
    }
}

#[cfg(test)]
mod new_order_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_new_order_codec() {
        let original = NewOrder {
            submitting_pbuid: vec!['a'; 6].into_iter().collect::<String>(),
            security_id: vec!['a'; 8].into_iter().collect::<String>(),
            security_id_source: vec!['a'; 4].into_iter().collect::<String>(),
            owner_type: 1234,
            clearing_firm: vec!['a'; 2].into_iter().collect::<String>(),
            transact_time: -123456789,
            user_info: vec!['a'; 32].into_iter().collect::<String>(),
            cl_ord_id: vec!['a'; 10].into_iter().collect::<String>(),
            account_id: vec!['a'; 10].into_iter().collect::<String>(),
            branch_id: vec!['a'; 2].into_iter().collect::<String>(),
            order_restrictions: vec!['a'; 4].into_iter().collect::<String>(),
            side: vec!['a'; 1].into_iter().collect::<String>(),
            ord_type: vec!['a'; 1].into_iter().collect::<String>(),
            order_qty: -123456789,
            price: -123456789,
            appl_id: "010".to_string(),
            appl_extend: NewOrderApplExtendEnum::ExtendNewOrder010(ExtendNewOrder010 {
                stop_px: -123456789,
                min_qty: -123456789,
                max_price_levels: 1234,
                time_in_force: vec!['a'; 1].into_iter().collect::<String>(),
                cash_margin: vec!['a'; 1].into_iter().collect::<String>(),
                settl_type: vec!['a'; 1].into_iter().collect::<String>(),
                settl_period: vec!['a'; 1].into_iter().collect::<String>(),
            }),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = NewOrder::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
