// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct ReportFinished {
    pub partition_no: i32,
    pub report_index: i64,
    pub platform_id: u16,
}

impl BinaryCodec for ReportFinished {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_i32_le(self.partition_no);
        buf.put_i64_le(self.report_index);
        buf.put_u16_le(self.platform_id);
    }

    fn decode(buf: &mut Bytes) -> Option<ReportFinished> {
        let partition_no = buf.get_i32_le();
        let report_index = buf.get_i64_le();
        let platform_id = buf.get_u16_le();
        Some(Self {
            partition_no,
            report_index,
            platform_id,
        })
    }
}

#[cfg(test)]
mod report_finished_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_report_finished_codec() {
        let original = ReportFinished {
            partition_no: -123456,
            report_index: -123456789,
            platform_id: 1234,
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = ReportFinished::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
