// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

use crate::extend_100101::*;
use crate::extend_100201::*;
use crate::extend_100301::*;
use crate::extend_100501::*;
use crate::extend_100601::*;
use crate::extend_100701::*;
use crate::extend_101501::*;
use crate::extend_101601::*;
use crate::extend_101701::*;
use crate::extend_101801::*;
use crate::extend_102701::*;
use crate::extend_102801::*;
use crate::extend_102901::*;
use crate::extend_103501::*;
use crate::extend_103701::*;
use crate::extend_104101::*;
use crate::extend_104128::*;
use crate::extend_104701::*;
use crate::extend_106301::*;

#[derive(Debug, Clone, PartialEq)]
pub enum NewOrderApplIDEnum {
    Extend100101(Extend100101),
    Extend100201(Extend100201),
    Extend100301(Extend100301),
    Extend100501(Extend100501),
    Extend100601(Extend100601),
    Extend100701(Extend100701),
    Extend101501(Extend101501),
    Extend101601(Extend101601),
    Extend101701(Extend101701),
    Extend101801(Extend101801),
    Extend102701(Extend102701),
    Extend102801(Extend102801),
    Extend102901(Extend102901),
    Extend106301(Extend106301),
    Extend103501(Extend103501),
    Extend103701(Extend103701),
    Extend104101(Extend104101),
    Extend104128(Extend104128),
    Extend104701(Extend104701),
}

#[derive(Debug, Clone, PartialEq)]
pub struct NewOrder {
    pub appl_id: String,
    pub submitting_pbuid: String,
    pub security_id: String,
    pub security_id_source: String,
    pub owner_type: u16,
    pub clearing_firm: String,
    pub transact_time: i64,
    pub user_info: String,
    pub cl_ord_id: String,
    pub account_id: String,
    pub branch_id: String,
    pub order_restrictions: String,
    pub side: char,
    pub ord_type: char,
    pub order_qty: i64,
    pub price: i64,
    pub appl_id_body: NewOrderApplIDEnum,
}

impl BinaryCodec for NewOrder {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.appl_id, 3);
        put_char_array(buf, &self.submitting_pbuid, 6);
        put_char_array(buf, &self.security_id, 8);
        put_char_array(buf, &self.security_id_source, 4);
        buf.put_u16(self.owner_type);
        put_char_array(buf, &self.clearing_firm, 2);
        buf.put_i64(self.transact_time);
        put_char_array(buf, &self.user_info, 8);
        put_char_array(buf, &self.cl_ord_id, 10);
        put_char_array(buf, &self.account_id, 12);
        put_char_array(buf, &self.branch_id, 4);
        put_char_array(buf, &self.order_restrictions, 4);
        put_char(buf, self.side);
        put_char(buf, self.ord_type);
        buf.put_i64(self.order_qty);
        buf.put_i64(self.price);
        match &self.appl_id_body {
            NewOrderApplIDEnum::Extend100101(msg) => msg.encode(buf),
            NewOrderApplIDEnum::Extend100201(msg) => msg.encode(buf),
            NewOrderApplIDEnum::Extend100301(msg) => msg.encode(buf),
            NewOrderApplIDEnum::Extend100501(msg) => msg.encode(buf),
            NewOrderApplIDEnum::Extend100601(msg) => msg.encode(buf),
            NewOrderApplIDEnum::Extend100701(msg) => msg.encode(buf),
            NewOrderApplIDEnum::Extend101501(msg) => msg.encode(buf),
            NewOrderApplIDEnum::Extend101601(msg) => msg.encode(buf),
            NewOrderApplIDEnum::Extend101701(msg) => msg.encode(buf),
            NewOrderApplIDEnum::Extend101801(msg) => msg.encode(buf),
            NewOrderApplIDEnum::Extend102701(msg) => msg.encode(buf),
            NewOrderApplIDEnum::Extend102801(msg) => msg.encode(buf),
            NewOrderApplIDEnum::Extend102901(msg) => msg.encode(buf),
            NewOrderApplIDEnum::Extend106301(msg) => msg.encode(buf),
            NewOrderApplIDEnum::Extend103501(msg) => msg.encode(buf),
            NewOrderApplIDEnum::Extend103701(msg) => msg.encode(buf),
            NewOrderApplIDEnum::Extend104101(msg) => msg.encode(buf),
            NewOrderApplIDEnum::Extend104128(msg) => msg.encode(buf),
            NewOrderApplIDEnum::Extend104701(msg) => msg.encode(buf),
        }
    }

    fn decode(buf: &mut Bytes) -> Option<NewOrder> {
        let appl_id = get_char_array(buf, 3)?;
        let submitting_pbuid = get_char_array(buf, 6)?;
        let security_id = get_char_array(buf, 8)?;
        let security_id_source = get_char_array(buf, 4)?;
        let owner_type = buf.get_u16();
        let clearing_firm = get_char_array(buf, 2)?;
        let transact_time = buf.get_i64();
        let user_info = get_char_array(buf, 8)?;
        let cl_ord_id = get_char_array(buf, 10)?;
        let account_id = get_char_array(buf, 12)?;
        let branch_id = get_char_array(buf, 4)?;
        let order_restrictions = get_char_array(buf, 4)?;
        let side = get_char(buf)?;
        let ord_type = get_char(buf)?;
        let order_qty = buf.get_i64();
        let price = buf.get_i64();
        let appl_id_body = match appl_id.as_str() {
            "010" => NewOrderApplIDEnum::Extend100101(Extend100101::decode(buf)?),
            "020" => NewOrderApplIDEnum::Extend100201(Extend100201::decode(buf)?),
            "030" => NewOrderApplIDEnum::Extend100301(Extend100301::decode(buf)?),
            "051" => NewOrderApplIDEnum::Extend100501(Extend100501::decode(buf)?),
            "052" => NewOrderApplIDEnum::Extend100501(Extend100501::decode(buf)?),
            "060" => NewOrderApplIDEnum::Extend100601(Extend100601::decode(buf)?),
            "061" => NewOrderApplIDEnum::Extend100601(Extend100601::decode(buf)?),
            "070" => NewOrderApplIDEnum::Extend100701(Extend100701::decode(buf)?),
            "150" => NewOrderApplIDEnum::Extend101501(Extend101501::decode(buf)?),
            "151" => NewOrderApplIDEnum::Extend101501(Extend101501::decode(buf)?),
            "152" => NewOrderApplIDEnum::Extend101501(Extend101501::decode(buf)?),
            "160" => NewOrderApplIDEnum::Extend101601(Extend101601::decode(buf)?),
            "170" => NewOrderApplIDEnum::Extend101701(Extend101701::decode(buf)?),
            "180" => NewOrderApplIDEnum::Extend101801(Extend101801::decode(buf)?),
            "181" => NewOrderApplIDEnum::Extend101801(Extend101801::decode(buf)?),
            "270" => NewOrderApplIDEnum::Extend102701(Extend102701::decode(buf)?),
            "271" => NewOrderApplIDEnum::Extend102701(Extend102701::decode(buf)?),
            "280" => NewOrderApplIDEnum::Extend102801(Extend102801::decode(buf)?),
            "281" => NewOrderApplIDEnum::Extend102801(Extend102801::decode(buf)?),
            "290" => NewOrderApplIDEnum::Extend102901(Extend102901::decode(buf)?),
            "291" => NewOrderApplIDEnum::Extend102901(Extend102901::decode(buf)?),
            "630" => NewOrderApplIDEnum::Extend106301(Extend106301::decode(buf)?),
            "350" => NewOrderApplIDEnum::Extend103501(Extend103501::decode(buf)?),
            "351" => NewOrderApplIDEnum::Extend103501(Extend103501::decode(buf)?),
            "370" => NewOrderApplIDEnum::Extend103701(Extend103701::decode(buf)?),
            "410" => NewOrderApplIDEnum::Extend104101(Extend104101::decode(buf)?),
            "417" => NewOrderApplIDEnum::Extend104128(Extend104128::decode(buf)?),
            "470" => NewOrderApplIDEnum::Extend104701(Extend104701::decode(buf)?),
            _ => return None,
        };
        Some(Self {
            appl_id,
            submitting_pbuid,
            security_id,
            security_id_source,
            owner_type,
            clearing_firm,
            transact_time,
            user_info,
            cl_ord_id,
            account_id,
            branch_id,
            order_restrictions,
            side,
            ord_type,
            order_qty,
            price,
            appl_id_body,
        })
    }
}

#[cfg(test)]
mod new_order_tests {
    use super::*;

    use bytes::BytesMut;

    #[test]
    fn test_new_order_codec() {
        let original = NewOrder {
            submitting_pbuid: vec!['a'; 6].into_iter().collect::<String>(),
            security_id: vec!['a'; 8].into_iter().collect::<String>(),
            security_id_source: vec!['a'; 4].into_iter().collect::<String>(),
            owner_type: 1234,
            clearing_firm: vec!['a'; 2].into_iter().collect::<String>(),
            transact_time: -123456789,
            user_info: vec!['a'; 8].into_iter().collect::<String>(),
            cl_ord_id: vec!['a'; 10].into_iter().collect::<String>(),
            account_id: vec!['a'; 12].into_iter().collect::<String>(),
            branch_id: vec!['a'; 4].into_iter().collect::<String>(),
            order_restrictions: vec!['a'; 4].into_iter().collect::<String>(),
            side: 'a',
            ord_type: 'a',
            order_qty: -123456789,
            price: -123456789,
            appl_id: "010".to_string(),
            appl_id_body: NewOrderApplIDEnum::Extend100101(Extend100101 {
                stop_px: -123456789,
                min_qty: -123456789,
                max_price_levels: 1234,
                time_in_force: 'a',
                cash_margin: 'a',
            }),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = NewOrder::decode(&mut bytes).unwrap();

        assert_eq!(original, decoded);
    }
}
