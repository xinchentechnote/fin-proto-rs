// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct OrderCancelRequest {
    pub appl_id: String,
    pub submitting_pbuid: String,
    pub security_id: String,
    pub security_id_source: String,
    pub owner_type: u16,
    pub clearing_firm: String,
    pub transact_time: i64,
    pub user_info: String,
    pub cl_ord_id: String,
    pub orig_cl_ord_id: String,
    pub side: char,
    pub order_id: String,
    pub order_qty: i64,
}

impl BinaryCodec for OrderCancelRequest {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.appl_id, 3);
        put_char_array(buf, &self.submitting_pbuid, 6);
        put_char_array(buf, &self.security_id, 8);
        put_char_array(buf, &self.security_id_source, 4);
        buf.put_u16(self.owner_type);
        put_char_array(buf, &self.clearing_firm, 2);
        buf.put_i64(self.transact_time);
        put_char_array(buf, &self.user_info, 8);
        put_char_array(buf, &self.cl_ord_id, 10);
        put_char_array(buf, &self.orig_cl_ord_id, 10);
        put_char(buf, self.side);
        put_char_array(buf, &self.order_id, 16);
        buf.put_i64(self.order_qty);
    }

    fn decode(buf: &mut Bytes) -> Option<OrderCancelRequest> {
        let appl_id = get_char_array(buf, 3)?;
        let submitting_pbuid = get_char_array(buf, 6)?;
        let security_id = get_char_array(buf, 8)?;
        let security_id_source = get_char_array(buf, 4)?;
        let owner_type = buf.get_u16();
        let clearing_firm = get_char_array(buf, 2)?;
        let transact_time = buf.get_i64();
        let user_info = get_char_array(buf, 8)?;
        let cl_ord_id = get_char_array(buf, 10)?;
        let orig_cl_ord_id = get_char_array(buf, 10)?;
        let side = get_char(buf)?;
        let order_id = get_char_array(buf, 16)?;
        let order_qty = buf.get_i64();
        Some(Self {
            appl_id,
            submitting_pbuid,
            security_id,
            security_id_source,
            owner_type,
            clearing_firm,
            transact_time,
            user_info,
            cl_ord_id,
            orig_cl_ord_id,
            side,
            order_id,
            order_qty,
        })
    }
}

#[cfg(test)]
mod order_cancel_request_tests {
    use super::*;

    use bytes::BytesMut;

    #[test]
    fn test_order_cancel_request_codec() {
        let original = OrderCancelRequest {
            appl_id: vec!['a'; 3].into_iter().collect::<String>(),
            submitting_pbuid: vec!['a'; 6].into_iter().collect::<String>(),
            security_id: vec!['a'; 8].into_iter().collect::<String>(),
            security_id_source: vec!['a'; 4].into_iter().collect::<String>(),
            owner_type: 1234,
            clearing_firm: vec!['a'; 2].into_iter().collect::<String>(),
            transact_time: -123456789,
            user_info: vec!['a'; 8].into_iter().collect::<String>(),
            cl_ord_id: vec!['a'; 10].into_iter().collect::<String>(),
            orig_cl_ord_id: vec!['a'; 10].into_iter().collect::<String>(),
            side: 'a',
            order_id: vec!['a'; 16].into_iter().collect::<String>(),
            order_qty: -123456789,
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = OrderCancelRequest::decode(&mut bytes).unwrap();

        assert_eq!(original, decoded);
    }
}
