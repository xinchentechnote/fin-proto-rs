// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct Extend202702 {
    pub disposal_pbu: String,
    pub disposal_account_id: String,
}

impl BinaryCodec for Extend202702 {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.disposal_pbu, 6);
        put_char_array(buf, &self.disposal_account_id, 12);
    }

    fn decode(buf: &mut Bytes) -> Option<Extend202702> {
        let disposal_pbu = get_char_array(buf, 6)?;
        let disposal_account_id = get_char_array(buf, 12)?;
        Some(Self {
            disposal_pbu,
            disposal_account_id,
        })
    }
}

#[cfg(test)]
mod extend_202702_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_extend_202702_codec() {
        let original = Extend202702 {
            disposal_pbu: vec!['a'; 6].into_iter().collect::<String>(),
            disposal_account_id: vec!['a'; 12].into_iter().collect::<String>(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = Extend202702::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
