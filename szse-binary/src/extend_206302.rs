// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct Extend206302 {
    pub reject_text: String,
    pub stop_px: i64,
    pub min_qty: i64,
    pub max_price_levels: u16,
    pub time_in_force: char,
    pub lot_type: char,
    pub imc_reject_text_len: u32,
    pub imc_reject_text: String,
}

impl BinaryCodec for Extend206302 {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.reject_text, 16);
        buf.put_i64(self.stop_px);
        buf.put_i64(self.min_qty);
        buf.put_u16(self.max_price_levels);
        put_char(buf, self.time_in_force);
        put_char(buf, self.lot_type);
        buf.put_u32(self.imc_reject_text_len);
        put_string::<u32>(buf, &self.imc_reject_text);
    }

    fn decode(buf: &mut Bytes) -> Option<Extend206302> {
        let reject_text = get_char_array(buf, 16)?;
        let stop_px = buf.get_i64();
        let min_qty = buf.get_i64();
        let max_price_levels = buf.get_u16();
        let time_in_force = get_char(buf)?;
        let lot_type = get_char(buf)?;
        let imc_reject_text_len = buf.get_u32();
        let imc_reject_text = get_string::<u32>(buf)?;
        Some(Self {
            reject_text,
            stop_px,
            min_qty,
            max_price_levels,
            time_in_force,
            lot_type,
            imc_reject_text_len,
            imc_reject_text,
        })
    }
}

#[cfg(test)]
mod extend_206302_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_extend_206302_codec() {
        let original = Extend206302 {
            reject_text: vec!['a'; 16].into_iter().collect::<String>(),
            stop_px: -123456789,
            min_qty: -123456789,
            max_price_levels: 1234,
            time_in_force: 'a',
            lot_type: 'a',
            imc_reject_text_len: 123456,
            imc_reject_text: "example".to_string(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = Extend206302::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
