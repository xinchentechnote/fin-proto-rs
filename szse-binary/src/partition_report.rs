// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct PartitionReport {
    pub partition_no: i32,
    pub report_index: i64,
}

impl BinaryCodec for PartitionReport {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_i32(self.partition_no);
        buf.put_i64(self.report_index);
    }

    fn decode(buf: &mut Bytes) -> Option<PartitionReport> {
        let partition_no = buf.get_i32();
        let report_index = buf.get_i64();
        Some(Self {
            partition_no,
            report_index,
        })
    }
}

#[cfg(test)]
mod partition_report_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_partition_report_codec() {
        let original = PartitionReport {
            partition_no: -123456,
            report_index: -123456789,
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = PartitionReport::decode(&mut bytes).unwrap();

        assert_eq!(original, decoded);
    }
}
