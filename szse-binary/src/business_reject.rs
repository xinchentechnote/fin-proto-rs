// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct BusinessReject {
    pub appl_id: String,
    pub transact_time: i64,
    pub submitting_pbuid: String,
    pub security_id: String,
    pub security_id_source: String,
    pub ref_seq_num: i64,
    pub ref_msg_type: u32,
    pub business_reject_ref_id: String,
    pub business_reject_reason: u16,
    pub business_reject_text: String,
}

impl BinaryCodec for BusinessReject {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.appl_id, 3);
        buf.put_i64(self.transact_time);
        put_char_array(buf, &self.submitting_pbuid, 6);
        put_char_array(buf, &self.security_id, 8);
        put_char_array(buf, &self.security_id_source, 4);
        buf.put_i64(self.ref_seq_num);
        buf.put_u32(self.ref_msg_type);
        put_char_array(buf, &self.business_reject_ref_id, 10);
        buf.put_u16(self.business_reject_reason);
        put_char_array(buf, &self.business_reject_text, 50);
    }

    fn decode(buf: &mut Bytes) -> Option<BusinessReject> {
        let appl_id = get_char_array(buf, 3)?;
        let transact_time = buf.get_i64();
        let submitting_pbuid = get_char_array(buf, 6)?;
        let security_id = get_char_array(buf, 8)?;
        let security_id_source = get_char_array(buf, 4)?;
        let ref_seq_num = buf.get_i64();
        let ref_msg_type = buf.get_u32();
        let business_reject_ref_id = get_char_array(buf, 10)?;
        let business_reject_reason = buf.get_u16();
        let business_reject_text = get_char_array(buf, 50)?;
        Some(Self {
            appl_id,
            transact_time,
            submitting_pbuid,
            security_id,
            security_id_source,
            ref_seq_num,
            ref_msg_type,
            business_reject_ref_id,
            business_reject_reason,
            business_reject_text,
        })
    }
}

#[cfg(test)]
mod business_reject_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_business_reject_codec() {
        let original = BusinessReject {
            appl_id: vec!['a'; 3].into_iter().collect::<String>(),
            transact_time: -123456789,
            submitting_pbuid: vec!['a'; 6].into_iter().collect::<String>(),
            security_id: vec!['a'; 8].into_iter().collect::<String>(),
            security_id_source: vec!['a'; 4].into_iter().collect::<String>(),
            ref_seq_num: -123456789,
            ref_msg_type: 123456,
            business_reject_ref_id: vec!['a'; 10].into_iter().collect::<String>(),
            business_reject_reason: 1234,
            business_reject_text: vec!['a'; 50].into_iter().collect::<String>(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = BusinessReject::decode(&mut bytes).unwrap();

        assert_eq!(original, decoded);
    }
}
