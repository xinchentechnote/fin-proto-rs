// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct Extend200402 {
    pub stop_px: i64,
    pub min_qty: i64,
    pub max_price_levels: u16,
    pub time_in_force: char,
    pub position_effect: char,
    pub covered_or_uncovered: u8,
    pub contract_account_code: String,
    pub secondary_order_id: String,
}

impl BinaryCodec for Extend200402 {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_i64(self.stop_px);
        buf.put_i64(self.min_qty);
        buf.put_u16(self.max_price_levels);
        put_char(buf, self.time_in_force);
        put_char(buf, self.position_effect);
        buf.put_u8(self.covered_or_uncovered);
        put_char_array(buf, &self.contract_account_code, 6);
        put_char_array(buf, &self.secondary_order_id, 16);
    }

    fn decode(buf: &mut Bytes) -> Option<Extend200402> {
        let stop_px = buf.get_i64();
        let min_qty = buf.get_i64();
        let max_price_levels = buf.get_u16();
        let time_in_force = get_char(buf)?;
        let position_effect = get_char(buf)?;
        let covered_or_uncovered = buf.get_u8();
        let contract_account_code = get_char_array(buf, 6)?;
        let secondary_order_id = get_char_array(buf, 16)?;
        Some(Self {
            stop_px,
            min_qty,
            max_price_levels,
            time_in_force,
            position_effect,
            covered_or_uncovered,
            contract_account_code,
            secondary_order_id,
        })
    }
}

#[cfg(test)]
mod extend_200402_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_extend_200402_codec() {
        let original = Extend200402 {
            stop_px: -123456789,
            min_qty: -123456789,
            max_price_levels: 1234,
            time_in_force: 'a',
            position_effect: 'a',
            covered_or_uncovered: 42,
            contract_account_code: vec!['a'; 6].into_iter().collect::<String>(),
            secondary_order_id: vec!['a'; 16].into_iter().collect::<String>(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = Extend200402::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
