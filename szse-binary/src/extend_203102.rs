// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct Extend203102 {
    pub insufficient_security_id: String,
    pub no_security: u32,
    pub underlying_security_id: String,
    pub underlying_security_id_source: String,
    pub delivery_qty: i64,
}

impl BinaryCodec for Extend203102 {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.insufficient_security_id, 8);
        buf.put_u32(self.no_security);
        put_char_array(buf, &self.underlying_security_id, 8);
        put_char_array(buf, &self.underlying_security_id_source, 4);
        buf.put_i64(self.delivery_qty);
    }

    fn decode(buf: &mut Bytes) -> Option<Extend203102> {
        let insufficient_security_id = get_char_array(buf, 8)?;
        let no_security = buf.get_u32();
        let underlying_security_id = get_char_array(buf, 8)?;
        let underlying_security_id_source = get_char_array(buf, 4)?;
        let delivery_qty = buf.get_i64();
        Some(Self {
            insufficient_security_id,
            no_security,
            underlying_security_id,
            underlying_security_id_source,
            delivery_qty,
        })
    }
}

#[cfg(test)]
mod extend_203102_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_extend_203102_codec() {
        let original = Extend203102 {
            insufficient_security_id: vec!['a'; 8].into_iter().collect::<String>(),
            no_security: 123456,
            underlying_security_id: vec!['a'; 8].into_iter().collect::<String>(),
            underlying_security_id_source: vec!['a'; 4].into_iter().collect::<String>(),
            delivery_qty: -123456789,
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = Extend203102::decode(&mut bytes).unwrap();

        assert_eq!(original, decoded);
    }
}
