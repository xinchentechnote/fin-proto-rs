// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct Extend101801 {
    pub tenderer: String,
}

impl BinaryCodec for Extend101801 {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.tenderer, 6);
    }

    fn decode(buf: &mut Bytes) -> Option<Extend101801> {
        let tenderer = get_char_array(buf, 6)?;
        Some(Self { tenderer })
    }
}

#[cfg(test)]
mod extend_101801_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_extend_101801_codec() {
        let original = Extend101801 {
            tenderer: vec!['a'; 6].into_iter().collect::<String>(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = Extend101801::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
