// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct Extend203502 {
    pub contract_account_code: String,
}

impl BinaryCodec for Extend203502 {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.contract_account_code, 6);
    }

    fn decode(buf: &mut Bytes) -> Option<Extend203502> {
        let contract_account_code = get_char_array(buf, 6)?;
        Some(Self {
            contract_account_code,
        })
    }
}

#[cfg(test)]
mod extend_203502_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_extend_203502_codec() {
        let original = Extend203502 {
            contract_account_code: vec!['a'; 6].into_iter().collect::<String>(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = Extend203502::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
