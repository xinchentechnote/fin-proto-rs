// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

use crate::partition_report::*;

#[derive(Debug, Clone, PartialEq)]
pub struct ReportSynchronization {
    pub no_partitions: u32,
    pub partition_report: Vec<PartitionReport>,
}

impl BinaryCodec for ReportSynchronization {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_u32(self.no_partitions);
        put_list::<PartitionReport, u16>(buf, &self.partition_report);
    }

    fn decode(buf: &mut Bytes) -> Option<ReportSynchronization> {
        let no_partitions = buf.get_u32();
        let partition_report = get_list::<PartitionReport, u16>(buf)?;
        Some(Self {
            no_partitions,
            partition_report,
        })
    }
}

#[cfg(test)]
mod report_synchronization_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_report_synchronization_codec() {
        let original = ReportSynchronization {
            no_partitions: 123456,
            partition_report: vec![],
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = ReportSynchronization::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
