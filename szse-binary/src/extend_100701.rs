// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct Extend100701 {
    pub expiration_days: u16,
    pub expiration_type: u8,
    pub share_property: String,
}

impl BinaryCodec for Extend100701 {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_u16(self.expiration_days);
        buf.put_u8(self.expiration_type);
        put_char_array(buf, &self.share_property, 2);
    }

    fn decode(buf: &mut Bytes) -> Option<Extend100701> {
        let expiration_days = buf.get_u16();
        let expiration_type = buf.get_u8();
        let share_property = get_char_array(buf, 2)?;
        Some(Self {
            expiration_days,
            expiration_type,
            share_property,
        })
    }
}

#[cfg(test)]
mod extend_100701_tests {
    use super::*;

    use bytes::BytesMut;

    #[test]
    fn test_extend_100701_codec() {
        let original = Extend100701 {
            expiration_days: 1234,
            expiration_type: 42,
            share_property: vec!['a'; 2].into_iter().collect::<String>(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = Extend100701::decode(&mut bytes).unwrap();

        assert_eq!(original, decoded);
    }
}
