// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

use crate::extend_200102::*;
use crate::extend_200202::*;
use crate::extend_200302::*;
use crate::extend_200502::*;
use crate::extend_200602::*;
use crate::extend_200702::*;
use crate::extend_201502::*;
use crate::extend_201602::*;
use crate::extend_201702::*;
use crate::extend_201802::*;
use crate::extend_202702::*;
use crate::extend_202802::*;
use crate::extend_202902::*;
use crate::extend_203502::*;
use crate::extend_203702::*;
use crate::extend_204102::*;
use crate::extend_204129::*;
use crate::extend_204702::*;
use crate::extend_206302::*;

#[derive(Debug, Clone, PartialEq)]
pub enum ExecutionConfirmApplIDEnum {
    Extend200102(Extend200102),
    Extend200202(Extend200202),
    Extend200302(Extend200302),
    Extend200502(Extend200502),
    Extend200602(Extend200602),
    Extend200702(Extend200702),
    Extend201502(Extend201502),
    Extend201602(Extend201602),
    Extend201702(Extend201702),
    Extend201802(Extend201802),
    Extend202702(Extend202702),
    Extend202802(Extend202802),
    Extend202902(Extend202902),
    Extend206302(Extend206302),
    Extend203502(Extend203502),
    Extend203702(Extend203702),
    Extend204102(Extend204102),
    Extend204129(Extend204129),
    Extend204702(Extend204702),
}

#[derive(Debug, Clone, PartialEq)]
pub struct ExecutionConfirm {
    pub partition_no: i32,
    pub report_index: i64,
    pub appl_id: String,
    pub reporting_pbuid: String,
    pub submitting_pbuid: String,
    pub security_id: String,
    pub security_id_source: String,
    pub owner_type: u16,
    pub clearing_firm: String,
    pub transact_time: i64,
    pub user_info: String,
    pub order_id: String,
    pub cl_ord_id: String,
    pub quote_msg_id: String,
    pub orig_cl_ord_id: String,
    pub exec_id: String,
    pub exec_type: char,
    pub ord_status: char,
    pub ord_rej_reason: u16,
    pub leaves_qty: i64,
    pub cum_qty: i64,
    pub side: char,
    pub ord_type: char,
    pub order_qty: i64,
    pub price: i64,
    pub account_id: String,
    pub branch_id: String,
    pub order_restrictions: String,
    pub appl_id_body: ExecutionConfirmApplIDEnum,
}

impl BinaryCodec for ExecutionConfirm {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_i32(self.partition_no);
        buf.put_i64(self.report_index);
        put_char_array(buf, &self.appl_id, 3);
        put_char_array(buf, &self.reporting_pbuid, 6);
        put_char_array(buf, &self.submitting_pbuid, 6);
        put_char_array(buf, &self.security_id, 8);
        put_char_array(buf, &self.security_id_source, 4);
        buf.put_u16(self.owner_type);
        put_char_array(buf, &self.clearing_firm, 2);
        buf.put_i64(self.transact_time);
        put_char_array(buf, &self.user_info, 8);
        put_char_array(buf, &self.order_id, 16);
        put_char_array(buf, &self.cl_ord_id, 10);
        put_char_array(buf, &self.quote_msg_id, 10);
        put_char_array(buf, &self.orig_cl_ord_id, 10);
        put_char_array(buf, &self.exec_id, 16);
        put_char(buf, self.exec_type);
        put_char(buf, self.ord_status);
        buf.put_u16(self.ord_rej_reason);
        buf.put_i64(self.leaves_qty);
        buf.put_i64(self.cum_qty);
        put_char(buf, self.side);
        put_char(buf, self.ord_type);
        buf.put_i64(self.order_qty);
        buf.put_i64(self.price);
        put_char_array(buf, &self.account_id, 12);
        put_char_array(buf, &self.branch_id, 4);
        put_char_array(buf, &self.order_restrictions, 4);
        match &self.appl_id_body {
            ExecutionConfirmApplIDEnum::Extend200102(msg) => msg.encode(buf),
            ExecutionConfirmApplIDEnum::Extend200202(msg) => msg.encode(buf),
            ExecutionConfirmApplIDEnum::Extend200302(msg) => msg.encode(buf),
            ExecutionConfirmApplIDEnum::Extend200502(msg) => msg.encode(buf),
            ExecutionConfirmApplIDEnum::Extend200602(msg) => msg.encode(buf),
            ExecutionConfirmApplIDEnum::Extend200702(msg) => msg.encode(buf),
            ExecutionConfirmApplIDEnum::Extend201502(msg) => msg.encode(buf),
            ExecutionConfirmApplIDEnum::Extend201602(msg) => msg.encode(buf),
            ExecutionConfirmApplIDEnum::Extend201702(msg) => msg.encode(buf),
            ExecutionConfirmApplIDEnum::Extend201802(msg) => msg.encode(buf),
            ExecutionConfirmApplIDEnum::Extend202702(msg) => msg.encode(buf),
            ExecutionConfirmApplIDEnum::Extend202802(msg) => msg.encode(buf),
            ExecutionConfirmApplIDEnum::Extend202902(msg) => msg.encode(buf),
            ExecutionConfirmApplIDEnum::Extend206302(msg) => msg.encode(buf),
            ExecutionConfirmApplIDEnum::Extend203502(msg) => msg.encode(buf),
            ExecutionConfirmApplIDEnum::Extend203702(msg) => msg.encode(buf),
            ExecutionConfirmApplIDEnum::Extend204102(msg) => msg.encode(buf),
            ExecutionConfirmApplIDEnum::Extend204129(msg) => msg.encode(buf),
            ExecutionConfirmApplIDEnum::Extend204702(msg) => msg.encode(buf),
        }
    }

    fn decode(buf: &mut Bytes) -> Option<ExecutionConfirm> {
        let partition_no = buf.get_i32();
        let report_index = buf.get_i64();
        let appl_id = get_char_array(buf, 3)?;
        let reporting_pbuid = get_char_array(buf, 6)?;
        let submitting_pbuid = get_char_array(buf, 6)?;
        let security_id = get_char_array(buf, 8)?;
        let security_id_source = get_char_array(buf, 4)?;
        let owner_type = buf.get_u16();
        let clearing_firm = get_char_array(buf, 2)?;
        let transact_time = buf.get_i64();
        let user_info = get_char_array(buf, 8)?;
        let order_id = get_char_array(buf, 16)?;
        let cl_ord_id = get_char_array(buf, 10)?;
        let quote_msg_id = get_char_array(buf, 10)?;
        let orig_cl_ord_id = get_char_array(buf, 10)?;
        let exec_id = get_char_array(buf, 16)?;
        let exec_type = get_char(buf)?;
        let ord_status = get_char(buf)?;
        let ord_rej_reason = buf.get_u16();
        let leaves_qty = buf.get_i64();
        let cum_qty = buf.get_i64();
        let side = get_char(buf)?;
        let ord_type = get_char(buf)?;
        let order_qty = buf.get_i64();
        let price = buf.get_i64();
        let account_id = get_char_array(buf, 12)?;
        let branch_id = get_char_array(buf, 4)?;
        let order_restrictions = get_char_array(buf, 4)?;
        let appl_id_body = match appl_id.as_str() {
            "010" => ExecutionConfirmApplIDEnum::Extend200102(Extend200102::decode(buf)?),
            "020" => ExecutionConfirmApplIDEnum::Extend200202(Extend200202::decode(buf)?),
            "030" => ExecutionConfirmApplIDEnum::Extend200302(Extend200302::decode(buf)?),
            "051" => ExecutionConfirmApplIDEnum::Extend200502(Extend200502::decode(buf)?),
            "052" => ExecutionConfirmApplIDEnum::Extend200502(Extend200502::decode(buf)?),
            "060" => ExecutionConfirmApplIDEnum::Extend200602(Extend200602::decode(buf)?),
            "061" => ExecutionConfirmApplIDEnum::Extend200602(Extend200602::decode(buf)?),
            "070" => ExecutionConfirmApplIDEnum::Extend200702(Extend200702::decode(buf)?),
            "150" => ExecutionConfirmApplIDEnum::Extend201502(Extend201502::decode(buf)?),
            "151" => ExecutionConfirmApplIDEnum::Extend201502(Extend201502::decode(buf)?),
            "152" => ExecutionConfirmApplIDEnum::Extend201502(Extend201502::decode(buf)?),
            "160" => ExecutionConfirmApplIDEnum::Extend201602(Extend201602::decode(buf)?),
            "170" => ExecutionConfirmApplIDEnum::Extend201702(Extend201702::decode(buf)?),
            "180" => ExecutionConfirmApplIDEnum::Extend201802(Extend201802::decode(buf)?),
            "181" => ExecutionConfirmApplIDEnum::Extend201802(Extend201802::decode(buf)?),
            "270" => ExecutionConfirmApplIDEnum::Extend202702(Extend202702::decode(buf)?),
            "271" => ExecutionConfirmApplIDEnum::Extend202702(Extend202702::decode(buf)?),
            "280" => ExecutionConfirmApplIDEnum::Extend202802(Extend202802::decode(buf)?),
            "281" => ExecutionConfirmApplIDEnum::Extend202802(Extend202802::decode(buf)?),
            "290" => ExecutionConfirmApplIDEnum::Extend202902(Extend202902::decode(buf)?),
            "291" => ExecutionConfirmApplIDEnum::Extend202902(Extend202902::decode(buf)?),
            "630" => ExecutionConfirmApplIDEnum::Extend206302(Extend206302::decode(buf)?),
            "350" => ExecutionConfirmApplIDEnum::Extend203502(Extend203502::decode(buf)?),
            "351" => ExecutionConfirmApplIDEnum::Extend203502(Extend203502::decode(buf)?),
            "370" => ExecutionConfirmApplIDEnum::Extend203702(Extend203702::decode(buf)?),
            "410" => ExecutionConfirmApplIDEnum::Extend204102(Extend204102::decode(buf)?),
            "417" => ExecutionConfirmApplIDEnum::Extend204129(Extend204129::decode(buf)?),
            "470" => ExecutionConfirmApplIDEnum::Extend204702(Extend204702::decode(buf)?),
            _ => return None,
        };
        Some(Self {
            partition_no,
            report_index,
            appl_id,
            reporting_pbuid,
            submitting_pbuid,
            security_id,
            security_id_source,
            owner_type,
            clearing_firm,
            transact_time,
            user_info,
            order_id,
            cl_ord_id,
            quote_msg_id,
            orig_cl_ord_id,
            exec_id,
            exec_type,
            ord_status,
            ord_rej_reason,
            leaves_qty,
            cum_qty,
            side,
            ord_type,
            order_qty,
            price,
            account_id,
            branch_id,
            order_restrictions,
            appl_id_body,
        })
    }
}

#[cfg(test)]
mod execution_confirm_tests {
    use super::*;

    use bytes::BytesMut;

    #[test]
    fn test_execution_confirm_codec() {
        let original = ExecutionConfirm {
            partition_no: -123456,
            report_index: -123456789,
            reporting_pbuid: vec!['a'; 6].into_iter().collect::<String>(),
            submitting_pbuid: vec!['a'; 6].into_iter().collect::<String>(),
            security_id: vec!['a'; 8].into_iter().collect::<String>(),
            security_id_source: vec!['a'; 4].into_iter().collect::<String>(),
            owner_type: 1234,
            clearing_firm: vec!['a'; 2].into_iter().collect::<String>(),
            transact_time: -123456789,
            user_info: vec!['a'; 8].into_iter().collect::<String>(),
            order_id: vec!['a'; 16].into_iter().collect::<String>(),
            cl_ord_id: vec!['a'; 10].into_iter().collect::<String>(),
            quote_msg_id: vec!['a'; 10].into_iter().collect::<String>(),
            orig_cl_ord_id: vec!['a'; 10].into_iter().collect::<String>(),
            exec_id: vec!['a'; 16].into_iter().collect::<String>(),
            exec_type: 'a',
            ord_status: 'a',
            ord_rej_reason: 1234,
            leaves_qty: -123456789,
            cum_qty: -123456789,
            side: 'a',
            ord_type: 'a',
            order_qty: -123456789,
            price: -123456789,
            account_id: vec!['a'; 12].into_iter().collect::<String>(),
            branch_id: vec!['a'; 4].into_iter().collect::<String>(),
            order_restrictions: vec!['a'; 4].into_iter().collect::<String>(),
            appl_id: "010".to_string(),
            appl_id_body: ExecutionConfirmApplIDEnum::Extend200102(Extend200102 {
                stop_px: -123456789,
                min_qty: -123456789,
                max_price_levels: 1234,
                time_in_force: 'a',
                cash_margin: 'a',
            }),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = ExecutionConfirm::decode(&mut bytes).unwrap();

        assert_eq!(original, decoded);
    }
}
