// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

use crate::business_reject::*;
use crate::cancel_reject::*;
use crate::execution_confirm::*;
use crate::execution_report::*;
use crate::heartbeat::*;
use crate::logon::*;
use crate::logout::*;
use crate::new_order::*;
use crate::order_cancel_request::*;
use crate::platform_partition::*;
use crate::platform_state_info::*;
use crate::report_finished::*;
use crate::report_synchronization::*;
use crate::trading_session_status::*;

#[derive(Debug, Clone, PartialEq)]
pub enum SzseBinaryBodyEnum {
    Logon(Logon),
    Logout(Logout),
    Heartbeat(Heartbeat),
    BusinessReject(BusinessReject),
    ReportSynchronization(ReportSynchronization),
    PlatformStateInfo(PlatformStateInfo),
    ReportFinished(ReportFinished),
    PlatformPartition(PlatformPartition),
    TradingSessionStatus(TradingSessionStatus),
    NewOrder(NewOrder),
    ExecutionConfirm(ExecutionConfirm),
    ExecutionReport(ExecutionReport),
    OrderCancelRequest(OrderCancelRequest),
    CancelReject(CancelReject),
}

#[derive(Debug, Clone, PartialEq)]
pub struct SzseBinary {
    pub msg_type: u32,
    pub body_length: u32,
    pub body: SzseBinaryBodyEnum,
    pub checksum: i32,
}

impl BinaryCodec for SzseBinary {
    fn encode(&self, buf: &mut BytesMut) {
        buf.put_u32(self.msg_type);
        let mut body_buf = BytesMut::new();
        match &self.body {
            SzseBinaryBodyEnum::Logon(msg) => msg.encode(&mut body_buf),
            SzseBinaryBodyEnum::Logout(msg) => msg.encode(&mut body_buf),
            SzseBinaryBodyEnum::Heartbeat(msg) => msg.encode(&mut body_buf),
            SzseBinaryBodyEnum::BusinessReject(msg) => msg.encode(&mut body_buf),
            SzseBinaryBodyEnum::ReportSynchronization(msg) => msg.encode(&mut body_buf),
            SzseBinaryBodyEnum::PlatformStateInfo(msg) => msg.encode(&mut body_buf),
            SzseBinaryBodyEnum::ReportFinished(msg) => msg.encode(&mut body_buf),
            SzseBinaryBodyEnum::PlatformPartition(msg) => msg.encode(&mut body_buf),
            SzseBinaryBodyEnum::TradingSessionStatus(msg) => msg.encode(&mut body_buf),
            SzseBinaryBodyEnum::NewOrder(msg) => msg.encode(&mut body_buf),
            SzseBinaryBodyEnum::ExecutionConfirm(msg) => msg.encode(&mut body_buf),
            SzseBinaryBodyEnum::ExecutionReport(msg) => msg.encode(&mut body_buf),
            SzseBinaryBodyEnum::OrderCancelRequest(msg) => msg.encode(&mut body_buf),
            SzseBinaryBodyEnum::CancelReject(msg) => msg.encode(&mut body_buf),
        }
        buf.put_u32(body_buf.len() as u32);

        buf.extend_from_slice(&body_buf);

        let val = CHECKSUM_SERVICE_CONTEXT
            .get("SZSE_BIN")
            .and_then(|service| match service.calc(buf) {
                Checksum::I32(v) => Some(v),
                _ => None,
            })
            .unwrap_or(self.checksum);
        buf.put_i32(val);
    }

    fn decode(buf: &mut Bytes) -> Option<SzseBinary> {
        let msg_type = buf.get_u32();
        let body_length = buf.get_u32();
        let body = match msg_type {
            1 => SzseBinaryBodyEnum::Logon(Logon::decode(buf)?),
            2 => SzseBinaryBodyEnum::Logout(Logout::decode(buf)?),
            3 => SzseBinaryBodyEnum::Heartbeat(Heartbeat::decode(buf)?),
            4 => SzseBinaryBodyEnum::BusinessReject(BusinessReject::decode(buf)?),
            5 => SzseBinaryBodyEnum::ReportSynchronization(ReportSynchronization::decode(buf)?),
            6 => SzseBinaryBodyEnum::PlatformStateInfo(PlatformStateInfo::decode(buf)?),
            7 => SzseBinaryBodyEnum::ReportFinished(ReportFinished::decode(buf)?),
            9 => SzseBinaryBodyEnum::PlatformPartition(PlatformPartition::decode(buf)?),
            10 => SzseBinaryBodyEnum::TradingSessionStatus(TradingSessionStatus::decode(buf)?),
            100101 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            100201 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            100301 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            100401 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            100501 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            100601 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            100701 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            101201 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            101301 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            101401 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            101501 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            101601 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            101701 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            101801 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            101901 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            102301 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            102701 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            102801 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            102901 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            103101 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            106301 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            103301 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            103501 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            103701 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            104101 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            104128 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            104701 => SzseBinaryBodyEnum::NewOrder(NewOrder::decode(buf)?),
            200102 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            200202 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            200302 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            200402 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            200502 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            200602 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            200702 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            201202 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            201302 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            201402 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            201502 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            201602 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            201702 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            201802 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            201902 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            202202 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            202302 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            202702 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            202802 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            202902 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            203102 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            206302 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            203302 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            203502 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            203702 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            204102 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            204129 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            204702 => SzseBinaryBodyEnum::ExecutionConfirm(ExecutionConfirm::decode(buf)?),
            200115 => SzseBinaryBodyEnum::ExecutionReport(ExecutionReport::decode(buf)?),
            200215 => SzseBinaryBodyEnum::ExecutionReport(ExecutionReport::decode(buf)?),
            200315 => SzseBinaryBodyEnum::ExecutionReport(ExecutionReport::decode(buf)?),
            200415 => SzseBinaryBodyEnum::ExecutionReport(ExecutionReport::decode(buf)?),
            200515 => SzseBinaryBodyEnum::ExecutionReport(ExecutionReport::decode(buf)?),
            200615 => SzseBinaryBodyEnum::ExecutionReport(ExecutionReport::decode(buf)?),
            200715 => SzseBinaryBodyEnum::ExecutionReport(ExecutionReport::decode(buf)?),
            206315 => SzseBinaryBodyEnum::ExecutionReport(ExecutionReport::decode(buf)?),
            203715 => SzseBinaryBodyEnum::ExecutionReport(ExecutionReport::decode(buf)?),
            204115 => SzseBinaryBodyEnum::ExecutionReport(ExecutionReport::decode(buf)?),
            204130 => SzseBinaryBodyEnum::ExecutionReport(ExecutionReport::decode(buf)?),
            190007 => SzseBinaryBodyEnum::OrderCancelRequest(OrderCancelRequest::decode(buf)?),
            290008 => SzseBinaryBodyEnum::CancelReject(CancelReject::decode(buf)?),
            _ => return None,
        };
        let checksum = buf.get_i32();
        Some(Self {
            msg_type,
            body_length,
            body,
            checksum,
        })
    }
}

#[cfg(test)]
mod szse_binary_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_szse_binary_codec() {
        let mut original = SzseBinary {
            body_length: 0,
            msg_type: 1,
            body: SzseBinaryBodyEnum::Logon(Logon {
                sender_comp_id: vec!['a'; 20].into_iter().collect::<String>(),
                target_comp_id: vec!['a'; 20].into_iter().collect::<String>(),
                heart_btint: -123456,
                password: vec!['a'; 16].into_iter().collect::<String>(),
                default_appl_ver_id: vec!['a'; 32].into_iter().collect::<String>(),
            }),
            checksum: -123456,
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = SzseBinary::decode(&mut bytes).unwrap();
        original.body_length = decoded.body_length;
        original.checksum = decoded.checksum;
        assert_eq!(original, decoded);
    }
}
