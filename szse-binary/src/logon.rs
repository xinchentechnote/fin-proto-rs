// Code generated by fin-protoc. DO NOT EDIT.
use binary_codec::*;
use bytes::{Buf, BufMut, Bytes, BytesMut};

#[derive(Debug, Clone, PartialEq)]
pub struct Logon {
    pub sender_comp_id: String,
    pub target_comp_id: String,
    pub heart_btint: i32,
    pub password: String,
    pub default_appl_ver_id: String,
}

impl BinaryCodec for Logon {
    fn encode(&self, buf: &mut BytesMut) {
        put_char_array(buf, &self.sender_comp_id, 20);
        put_char_array(buf, &self.target_comp_id, 20);
        buf.put_i32(self.heart_btint);
        put_char_array(buf, &self.password, 16);
        put_char_array(buf, &self.default_appl_ver_id, 32);
    }

    fn decode(buf: &mut Bytes) -> Option<Logon> {
        let sender_comp_id = get_char_array(buf, 20)?;
        let target_comp_id = get_char_array(buf, 20)?;
        let heart_btint = buf.get_i32();
        let password = get_char_array(buf, 16)?;
        let default_appl_ver_id = get_char_array(buf, 32)?;
        Some(Self {
            sender_comp_id,
            target_comp_id,
            heart_btint,
            password,
            default_appl_ver_id,
        })
    }
}

#[cfg(test)]
mod logon_tests {
    use super::*;
    use bytes::BytesMut;

    #[test]
    fn test_logon_codec() {
        let original = Logon {
            sender_comp_id: vec!['a'; 20].into_iter().collect::<String>(),
            target_comp_id: vec!['a'; 20].into_iter().collect::<String>(),
            heart_btint: -123456,
            password: vec!['a'; 16].into_iter().collect::<String>(),
            default_appl_ver_id: vec!['a'; 32].into_iter().collect::<String>(),
        };

        let mut buf = BytesMut::new();
        original.encode(&mut buf);
        let mut bytes = buf.freeze();

        let decoded = Logon::decode(&mut bytes).unwrap();
        assert_eq!(original, decoded);
    }
}
