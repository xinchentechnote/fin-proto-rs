-- Code generated by fin-protoc. DO NOT EDIT.

local function parse_be_uint64(buf, offset)
    local bytes = buf(offset, 8):bytes()
    return bytes:get_index(0) * 0x100000000000000 +
        bytes:get_index(1) * 0x1000000000000 +
        bytes:get_index(2) * 0x10000000000 +
        bytes:get_index(3) * 0x100000000 +
        bytes:get_index(4) * 0x1000000 +
        bytes:get_index(5) * 0x10000 +
        bytes:get_index(6) * 0x100 +
        bytes:get_index(7)
end

local szse_binary_proto = Proto("SzseBinary", "SzseBinary Protocol")
local fields = {
    -- Field from SzseBinary
    szse_binary_msg_type = ProtoField.uint32("szse_binary.msg_type", "MsgType", base.DEC),
    szse_binary_body_length = ProtoField.uint32("szse_binary.body_length", "BodyLength", base.DEC),
    -- Unsupported type: match
    szse_binary_checksum = ProtoField.int("szse_binary.checksum", "Checksum", base.DEC),
    -- Field from Logon
    logon_sender_comp_id = ProtoField.string("logon.sender_comp_id", "SenderCompID"),
    logon_target_comp_id = ProtoField.string("logon.target_comp_id", "TargetCompID"),
    logon_heart_bt_int = ProtoField.int("logon.heart_bt_int", "HeartBtInt", base.DEC),
    logon_password = ProtoField.string("logon.password", "Password"),
    logon_default_appl_ver_id = ProtoField.string("logon.default_appl_ver_id", "DefaultApplVerID"),
    -- Field from Logout
    logout_session_status = ProtoField.int("logout.session_status", "SessionStatus", base.DEC),
    logout_text = ProtoField.string("logout.text", "Text"),
    -- Field from Heartbeat
    -- Field from NewOrder
    new_order_appl_id = ProtoField.string("new_order.appl_id", "ApplID"),
    new_order_submitting_pbuid = ProtoField.string("new_order.submitting_pbuid", "SubmittingPBUID"),
    new_order_security_id = ProtoField.string("new_order.security_id", "SecurityID"),
    new_order_security_id_source = ProtoField.string("new_order.security_id_source", "SecurityIDSource"),
    new_order_owner_type = ProtoField.uint32("new_order.owner_type", "OwnerType", base.DEC),
    new_order_clearing_firm = ProtoField.string("new_order.clearing_firm", "ClearingFirm"),
    new_order_transact_time = ProtoField.int64("new_order.transact_time", "TransactTime", base.DEC),
    new_order_user_info = ProtoField.string("new_order.user_info", "UserInfo"),
    new_order_cl_ord_id = ProtoField.string("new_order.cl_ord_id", "ClOrdID"),
    new_order_account_id = ProtoField.string("new_order.account_id", "AccountID"),
    new_order_branch_id = ProtoField.string("new_order.branch_id", "BranchID"),
    new_order_order_restrictions = ProtoField.string("new_order.order_restrictions", "OrderRestrictions"),
    new_order_side = ProtoField.char("new_order.side", "Side", base.OCT),
    new_order_ord_type = ProtoField.char("new_order.ord_type", "OrdType", base.OCT),
    new_order_order_qty = ProtoField.int64("new_order.order_qty", "OrderQty", base.DEC),
    new_order_price = ProtoField.int64("new_order.price", "Price", base.DEC),
    -- Unsupported type: match
    -- Field from Extend100101
    extend_100101_stop_px = ProtoField.int64("extend_100101.stop_px", "StopPx", base.DEC),
    extend_100101_min_qty = ProtoField.int64("extend_100101.min_qty", "MinQty", base.DEC),
    extend_100101_max_price_levels = ProtoField.uint32("extend_100101.max_price_levels", "MaxPriceLevels", base.DEC),
    extend_100101_time_in_force = ProtoField.char("extend_100101.time_in_force", "TimeInForce", base.OCT),
    extend_100101_cash_margin = ProtoField.char("extend_100101.cash_margin", "CashMargin", base.OCT),
    -- Field from Extend100201
    extend_100201_stop_px = ProtoField.int64("extend_100201.stop_px", "StopPx", base.DEC),
    extend_100201_min_qty = ProtoField.int64("extend_100201.min_qty", "MinQty", base.DEC),
    extend_100201_max_price_levels = ProtoField.uint32("extend_100201.max_price_levels", "MaxPriceLevels", base.DEC),
    extend_100201_time_in_force = ProtoField.char("extend_100201.time_in_force", "TimeInForce", base.OCT),
    -- Field from Extend100301
    extend_100301_stop_px = ProtoField.int64("extend_100301.stop_px", "StopPx", base.DEC),
    extend_100301_min_qty = ProtoField.int64("extend_100301.min_qty", "MinQty", base.DEC),
    extend_100301_max_price_levels = ProtoField.uint32("extend_100301.max_price_levels", "MaxPriceLevels", base.DEC),
    extend_100301_time_in_force = ProtoField.char("extend_100301.time_in_force", "TimeInForce", base.OCT),
    -- Field from Extend101401
    extend_101401_stop_px = ProtoField.int64("extend_101401.stop_px", "StopPx", base.DEC),
    extend_101401_min_qty = ProtoField.int64("extend_101401.min_qty", "MinQty", base.DEC),
    extend_101401_max_price_levels = ProtoField.uint32("extend_101401.max_price_levels", "MaxPriceLevels", base.DEC),
    extend_101401_time_in_force = ProtoField.char("extend_101401.time_in_force", "TimeInForce", base.OCT),
    extend_101401_position_effect = ProtoField.char("extend_101401.position_effect", "PositionEffect", base.OCT),
    extend_101401_covered_or_uncovered = ProtoField.uint32("extend_101401.covered_or_uncovered", "CoveredOrUncovered", base.DEC),
    extend_101401_contract_account_code = ProtoField.string("extend_101401.contract_account_code", "ContractAccountCode"),
    extend_101401_secondary_order_id = ProtoField.string("extend_101401.secondary_order_id", "SecondaryOrderID"),
    -- Field from Extend100501
    extend_100501_confirm_id = ProtoField.string("extend_100501.confirm_id", "ConfirmID"),
    extend_100501_cash_margin = ProtoField.char("extend_100501.cash_margin", "CashMargin", base.OCT),
    -- Field from Extend100601
    extend_100601_cash_margin = ProtoField.char("extend_100601.cash_margin", "CashMargin", base.OCT),
    -- Field from Extend100701
    extend_100701_expiration_days = ProtoField.uint32("extend_100701.expiration_days", "ExpirationDays", base.DEC),
    extend_100701_expiration_type = ProtoField.uint32("extend_100701.expiration_type", "ExpirationType", base.DEC),
    extend_100701_share_property = ProtoField.string("extend_100701.share_property", "ShareProperty"),
    -- Field from Extend101501
    extend_101501_share_property = ProtoField.string("extend_101501.share_property", "ShareProperty"),
    -- Field from Extend101601
    extend_101601_contract_account_code = ProtoField.string("extend_101601.contract_account_code", "ContractAccountCode"),
    -- Field from Extend101701
    extend_101701_cash_order_qty = ProtoField.int64("extend_101701.cash_order_qty", "CashOrderQty", base.DEC),
    -- Field from Extend101801
    extend_101801_tenderer = ProtoField.string("extend_101801.tenderer", "Tenderer"),
    -- Field from Extend102701
    extend_102701_disposal_pbu = ProtoField.string("extend_102701.disposal_pbu", "DisposalPBU"),
    extend_102701_disposal_account_id = ProtoField.string("extend_102701.disposal_account_id", "DisposalAccountID"),
    -- Field from Extend102801
    extend_102801_lender_pbu = ProtoField.string("extend_102801.lender_pbu", "LenderPBU"),
    extend_102801_lender_account_id = ProtoField.string("extend_102801.lender_account_id", "LenderAccountID"),
    -- Field from Extend102901
    extend_102901_deduction_pbu = ProtoField.string("extend_102901.deduction_pbu", "DeductionPBU"),
    extend_102901_deduction_account_id = ProtoField.string("extend_102901.deduction_account_id", "DeductionAccountID"),
    -- Field from Extend106301
    extend_106301_stop_px = ProtoField.int64("extend_106301.stop_px", "StopPx", base.DEC),
    extend_106301_min_qty = ProtoField.int64("extend_106301.min_qty", "MinQty", base.DEC),
    extend_106301_max_price_levels = ProtoField.uint32("extend_106301.max_price_levels", "MaxPriceLevels", base.DEC),
    extend_106301_time_in_force = ProtoField.char("extend_106301.time_in_force", "TimeInForce", base.OCT),
    extend_106301_lot_type = ProtoField.char("extend_106301.lot_type", "LotType", base.OCT),
    -- Field from Extend103501
    extend_103501_contract_account_code = ProtoField.string("extend_103501.contract_account_code", "ContractAccountCode"),
    -- Field from Extend103701
    extend_103701_cash_margin = ProtoField.char("extend_103701.cash_margin", "CashMargin", base.OCT),
    -- Field from Extend104101
    extend_104101_stop_px = ProtoField.int64("extend_104101.stop_px", "StopPx", base.DEC),
    extend_104101_min_qty = ProtoField.int64("extend_104101.min_qty", "MinQty", base.DEC),
    extend_104101_max_price_levels = ProtoField.uint32("extend_104101.max_price_levels", "MaxPriceLevels", base.DEC),
    extend_104101_time_in_force = ProtoField.char("extend_104101.time_in_force", "TimeInForce", base.OCT),
    extend_104101_cash_margin = ProtoField.char("extend_104101.cash_margin", "CashMargin", base.OCT),
    -- Field from Extend104128
    extend_104128_member_id = ProtoField.string("extend_104128.member_id", "MemberID"),
    extend_104128_investor_type = ProtoField.string("extend_104128.investor_type", "InvestorType"),
    extend_104128_investor_id = ProtoField.string("extend_104128.investor_id", "InvestorID"),
    extend_104128_investor_name = ProtoField.string("extend_104128.investor_name", "InvestorName"),
    extend_104128_trader_code = ProtoField.string("extend_104128.trader_code", "TraderCode"),
    extend_104128_secondary_order_id = ProtoField.string("extend_104128.secondary_order_id", "SecondaryOrderID"),
    extend_104128_bid_trans_type = ProtoField.uint32("extend_104128.bid_trans_type", "BidTransType", base.DEC),
    extend_104128_bid_exec_inst_type = ProtoField.uint32("extend_104128.bid_exec_inst_type", "BidExecInstType", base.DEC),
    extend_104128_low_limit_price = ProtoField.int64("extend_104128.low_limit_price", "LowLimitPrice", base.DEC),
    extend_104128_high_limit_price = ProtoField.int64("extend_104128.high_limit_price", "HighLimitPrice", base.DEC),
    extend_104128_min_qty = ProtoField.int64("extend_104128.min_qty", "MinQty", base.DEC),
    extend_104128_trade_date = ProtoField.uint32("extend_104128.trade_date", "TradeDate", base.DEC),
    extend_104128_settl_type = ProtoField.uint32("extend_104128.settl_type", "SettlType", base.DEC),
    extend_104128_settl_period = ProtoField.uint32("extend_104128.settl_period", "SettlPeriod", base.DEC),
    extend_104128_pre_trade_anonymity = ProtoField.uint32("extend_104128.pre_trade_anonymity", "PreTradeAnonymity", base.DEC),
    extend_104128_cash_margin = ProtoField.char("extend_104128.cash_margin", "CashMargin", base.OCT),
    extend_104128_memo = ProtoField.string("extend_104128.memo", "Memo"),
    -- Field from Extend104701
    extend_104701_secondary_order_id = ProtoField.string("extend_104701.secondary_order_id", "SecondaryOrderID"),
    -- Field from ExecutionConfirm
    execution_confirm_partition_no = ProtoField.int("execution_confirm.partition_no", "PartitionNo", base.DEC),
    execution_confirm_report_index = ProtoField.int64("execution_confirm.report_index", "ReportIndex", base.DEC),
    execution_confirm_appl_id = ProtoField.string("execution_confirm.appl_id", "ApplID"),
    execution_confirm_reporting_pbuid = ProtoField.string("execution_confirm.reporting_pbuid", "ReportingPBUID"),
    execution_confirm_submitting_pbuid = ProtoField.string("execution_confirm.submitting_pbuid", "SubmittingPBUID"),
    execution_confirm_security_id = ProtoField.string("execution_confirm.security_id", "SecurityID"),
    execution_confirm_security_id_source = ProtoField.string("execution_confirm.security_id_source", "SecurityIDSource"),
    execution_confirm_owner_type = ProtoField.uint32("execution_confirm.owner_type", "OwnerType", base.DEC),
    execution_confirm_clearing_firm = ProtoField.string("execution_confirm.clearing_firm", "ClearingFirm"),
    execution_confirm_transact_time = ProtoField.int64("execution_confirm.transact_time", "TransactTime", base.DEC),
    execution_confirm_user_info = ProtoField.string("execution_confirm.user_info", "UserInfo"),
    execution_confirm_order_id = ProtoField.string("execution_confirm.order_id", "OrderID"),
    execution_confirm_cl_ord_id = ProtoField.string("execution_confirm.cl_ord_id", "ClOrdID"),
    execution_confirm_quote_msg_id = ProtoField.string("execution_confirm.quote_msg_id", "QuoteMsgID"),
    execution_confirm_orig_cl_ord_id = ProtoField.string("execution_confirm.orig_cl_ord_id", "OrigClOrdID"),
    execution_confirm_exec_id = ProtoField.string("execution_confirm.exec_id", "ExecID"),
    execution_confirm_exec_type = ProtoField.char("execution_confirm.exec_type", "ExecType", base.OCT),
    execution_confirm_ord_status = ProtoField.char("execution_confirm.ord_status", "OrdStatus", base.OCT),
    execution_confirm_ord_rej_reason = ProtoField.uint32("execution_confirm.ord_rej_reason", "OrdRejReason", base.DEC),
    execution_confirm_leaves_qty = ProtoField.int64("execution_confirm.leaves_qty", "LeavesQty", base.DEC),
    execution_confirm_cum_qty = ProtoField.int64("execution_confirm.cum_qty", "CumQty", base.DEC),
    execution_confirm_side = ProtoField.char("execution_confirm.side", "Side", base.OCT),
    execution_confirm_ord_type = ProtoField.char("execution_confirm.ord_type", "OrdType", base.OCT),
    execution_confirm_order_qty = ProtoField.int64("execution_confirm.order_qty", "OrderQty", base.DEC),
    execution_confirm_price = ProtoField.int64("execution_confirm.price", "Price", base.DEC),
    execution_confirm_account_id = ProtoField.string("execution_confirm.account_id", "AccountID"),
    execution_confirm_branch_id = ProtoField.string("execution_confirm.branch_id", "BranchID"),
    execution_confirm_order_restrictions = ProtoField.string("execution_confirm.order_restrictions", "OrderRestrictions"),
    -- Unsupported type: match
    -- Field from Extend200102
    extend_200102_stop_px = ProtoField.int64("extend_200102.stop_px", "StopPx", base.DEC),
    extend_200102_min_qty = ProtoField.int64("extend_200102.min_qty", "MinQty", base.DEC),
    extend_200102_max_price_levels = ProtoField.uint32("extend_200102.max_price_levels", "MaxPriceLevels", base.DEC),
    extend_200102_time_in_force = ProtoField.char("extend_200102.time_in_force", "TimeInForce", base.OCT),
    extend_200102_cash_margin = ProtoField.char("extend_200102.cash_margin", "CashMargin", base.OCT),
    -- Field from Extend200202
    extend_200202_stop_px = ProtoField.int64("extend_200202.stop_px", "StopPx", base.DEC),
    extend_200202_min_qty = ProtoField.int64("extend_200202.min_qty", "MinQty", base.DEC),
    extend_200202_max_price_levels = ProtoField.uint32("extend_200202.max_price_levels", "MaxPriceLevels", base.DEC),
    extend_200202_time_in_force = ProtoField.char("extend_200202.time_in_force", "TimeInForce", base.OCT),
    -- Field from Extend200302
    extend_200302_stop_px = ProtoField.int64("extend_200302.stop_px", "StopPx", base.DEC),
    extend_200302_min_qty = ProtoField.int64("extend_200302.min_qty", "MinQty", base.DEC),
    extend_200302_max_price_levels = ProtoField.uint32("extend_200302.max_price_levels", "MaxPriceLevels", base.DEC),
    extend_200302_time_in_force = ProtoField.char("extend_200302.time_in_force", "TimeInForce", base.OCT),
    -- Field from Extend200402
    extend_200402_stop_px = ProtoField.int64("extend_200402.stop_px", "StopPx", base.DEC),
    extend_200402_min_qty = ProtoField.int64("extend_200402.min_qty", "MinQty", base.DEC),
    extend_200402_max_price_levels = ProtoField.uint32("extend_200402.max_price_levels", "MaxPriceLevels", base.DEC),
    extend_200402_time_in_force = ProtoField.char("extend_200402.time_in_force", "TimeInForce", base.OCT),
    extend_200402_position_effect = ProtoField.char("extend_200402.position_effect", "PositionEffect", base.OCT),
    extend_200402_covered_or_uncovered = ProtoField.uint32("extend_200402.covered_or_uncovered", "CoveredOrUncovered", base.DEC),
    extend_200402_contract_account_code = ProtoField.string("extend_200402.contract_account_code", "ContractAccountCode"),
    extend_200402_secondary_order_id = ProtoField.string("extend_200402.secondary_order_id", "SecondaryOrderID"),
    -- Field from Extend200502
    extend_200502_confirm_id = ProtoField.string("extend_200502.confirm_id", "ConfirmID"),
    extend_200502_cash_margin = ProtoField.char("extend_200502.cash_margin", "CashMargin", base.OCT),
    -- Field from Extend200602
    extend_200602_cash_margin = ProtoField.char("extend_200602.cash_margin", "CashMargin", base.OCT),
    -- Field from Extend200702
    extend_200702_expiration_days = ProtoField.uint32("extend_200702.expiration_days", "ExpirationDays", base.DEC),
    extend_200702_expiration_type = ProtoField.uint32("extend_200702.expiration_type", "ExpirationType", base.DEC),
    extend_200702_share_property = ProtoField.string("extend_200702.share_property", "ShareProperty"),
    -- Field from Extend201202
    extend_201202_insufficient_security_id = ProtoField.string("extend_201202.insufficient_security_id", "InsufficientSecurityID"),
    extend_201202_no_security = ProtoField.uint32("extend_201202.no_security", "NoSecurity", base.DEC),
    extend_201202_underlying_security_id = ProtoField.string("extend_201202.underlying_security_id", "UnderlyingSecurityID"),
    extend_201202_underlying_security_id_source = ProtoField.string("extend_201202.underlying_security_id_source", "UnderlyingSecurityIDSource"),
    extend_201202_delivery_qty = ProtoField.int64("extend_201202.delivery_qty", "DeliveryQty", base.DEC),
    extend_201202_subst_cash = ProtoField.int64("extend_201202.subst_cash", "SubstCash", base.DEC),
    -- Field from Extend201502
    extend_201502_share_property = ProtoField.string("extend_201502.share_property", "ShareProperty"),
    -- Field from Extend201602
    extend_201602_contract_account_code = ProtoField.string("extend_201602.contract_account_code", "ContractAccountCode"),
    -- Field from Extend201702
    extend_201702_cash_order_qty = ProtoField.int64("extend_201702.cash_order_qty", "CashOrderQty", base.DEC),
    -- Field from Extend201802
    extend_201802_tenderer = ProtoField.string("extend_201802.tenderer", "Tenderer"),
    -- Field from Extend202702
    extend_202702_disposal_pbu = ProtoField.string("extend_202702.disposal_pbu", "DisposalPBU"),
    extend_202702_disposal_account_id = ProtoField.string("extend_202702.disposal_account_id", "DisposalAccountID"),
    -- Field from Extend202802
    extend_202802_lender_pbu = ProtoField.string("extend_202802.lender_pbu", "LenderPBU"),
    extend_202802_lender_account_id = ProtoField.string("extend_202802.lender_account_id", "LenderAccountID"),
    -- Field from Extend202902
    extend_202902_deduction_pbu = ProtoField.string("extend_202902.deduction_pbu", "DeductionPBU"),
    extend_202902_deduction_account_id = ProtoField.string("extend_202902.deduction_account_id", "DeductionAccountID"),
    -- Field from Extend203102
    extend_203102_insufficient_security_id = ProtoField.string("extend_203102.insufficient_security_id", "InsufficientSecurityID"),
    extend_203102_no_security = ProtoField.uint32("extend_203102.no_security", "NoSecurity", base.DEC),
    extend_203102_underlying_security_id = ProtoField.string("extend_203102.underlying_security_id", "UnderlyingSecurityID"),
    extend_203102_underlying_security_id_source = ProtoField.string("extend_203102.underlying_security_id_source", "UnderlyingSecurityIDSource"),
    extend_203102_delivery_qty = ProtoField.int64("extend_203102.delivery_qty", "DeliveryQty", base.DEC),
    -- Field from Extend206302
    extend_206302_reject_text = ProtoField.string("extend_206302.reject_text", "RejectText"),
    extend_206302_stop_px = ProtoField.int64("extend_206302.stop_px", "StopPx", base.DEC),
    extend_206302_min_qty = ProtoField.int64("extend_206302.min_qty", "MinQty", base.DEC),
    extend_206302_max_price_levels = ProtoField.uint32("extend_206302.max_price_levels", "MaxPriceLevels", base.DEC),
    extend_206302_time_in_force = ProtoField.char("extend_206302.time_in_force", "TimeInForce", base.OCT),
    extend_206302_lot_type = ProtoField.char("extend_206302.lot_type", "LotType", base.OCT),
    extend_206302_imc_reject_text_len = ProtoField.uint32("extend_206302.imc_reject_text_len", "IMCRejectTextLen", base.DEC),
    extend_206302_imc_reject_text = ProtoField.string("extend_206302.imc_reject_text", "IMCRejectText"),
    -- Field from Extend203502
    extend_203502_contract_account_code = ProtoField.string("extend_203502.contract_account_code", "ContractAccountCode"),
    -- Field from Extend203702
    extend_203702_cash_margin = ProtoField.char("extend_203702.cash_margin", "CashMargin", base.OCT),
    -- Field from Extend204102
    extend_204102_stop_px = ProtoField.int64("extend_204102.stop_px", "StopPx", base.DEC),
    extend_204102_min_qty = ProtoField.int64("extend_204102.min_qty", "MinQty", base.DEC),
    extend_204102_max_price_levels = ProtoField.uint32("extend_204102.max_price_levels", "MaxPriceLevels", base.DEC),
    extend_204102_time_in_force = ProtoField.char("extend_204102.time_in_force", "TimeInForce", base.OCT),
    extend_204102_cash_margin = ProtoField.char("extend_204102.cash_margin", "CashMargin", base.OCT),
    -- Field from Extend204129
    extend_204129_member_id = ProtoField.string("extend_204129.member_id", "MemberID"),
    extend_204129_investor_type = ProtoField.string("extend_204129.investor_type", "InvestorType"),
    extend_204129_investor_id = ProtoField.string("extend_204129.investor_id", "InvestorID"),
    extend_204129_investor_name = ProtoField.string("extend_204129.investor_name", "InvestorName"),
    extend_204129_trader_code = ProtoField.string("extend_204129.trader_code", "TraderCode"),
    extend_204129_secondary_order_id = ProtoField.string("extend_204129.secondary_order_id", "SecondaryOrderID"),
    extend_204129_bid_trans_type = ProtoField.uint32("extend_204129.bid_trans_type", "BidTransType", base.DEC),
    extend_204129_bid_exec_inst_type = ProtoField.uint32("extend_204129.bid_exec_inst_type", "BidExecInstType", base.DEC),
    extend_204129_low_limit_price = ProtoField.int64("extend_204129.low_limit_price", "LowLimitPrice", base.DEC),
    extend_204129_high_limit_price = ProtoField.int64("extend_204129.high_limit_price", "HighLimitPrice", base.DEC),
    extend_204129_min_qty = ProtoField.int64("extend_204129.min_qty", "MinQty", base.DEC),
    extend_204129_trade_date = ProtoField.uint32("extend_204129.trade_date", "TradeDate", base.DEC),
    extend_204129_settl_type = ProtoField.uint32("extend_204129.settl_type", "SettlType", base.DEC),
    extend_204129_settl_period = ProtoField.uint32("extend_204129.settl_period", "SettlPeriod", base.DEC),
    extend_204129_pre_trade_anonymity = ProtoField.uint32("extend_204129.pre_trade_anonymity", "PreTradeAnonymity", base.DEC),
    extend_204129_cash_margin = ProtoField.char("extend_204129.cash_margin", "CashMargin", base.OCT),
    extend_204129_memo = ProtoField.string("extend_204129.memo", "Memo"),
    -- Field from Extend204702
    extend_204702_secondary_order_id = ProtoField.string("extend_204702.secondary_order_id", "SecondaryOrderID"),
    -- Field from ExecutionReport
    execution_report_partition_no = ProtoField.int("execution_report.partition_no", "PartitionNo", base.DEC),
    execution_report_report_index = ProtoField.int64("execution_report.report_index", "ReportIndex", base.DEC),
    execution_report_appl_id = ProtoField.string("execution_report.appl_id", "ApplID"),
    execution_report_reporting_pbuid = ProtoField.string("execution_report.reporting_pbuid", "ReportingPBUID"),
    execution_report_submitting_pbuid = ProtoField.string("execution_report.submitting_pbuid", "SubmittingPBUID"),
    execution_report_security_id = ProtoField.string("execution_report.security_id", "SecurityID"),
    execution_report_security_id_source = ProtoField.string("execution_report.security_id_source", "SecurityIDSource"),
    execution_report_owner_type = ProtoField.uint32("execution_report.owner_type", "OwnerType", base.DEC),
    execution_report_clearing_firm = ProtoField.string("execution_report.clearing_firm", "ClearingFirm"),
    execution_report_transact_time = ProtoField.int64("execution_report.transact_time", "TransactTime", base.DEC),
    execution_report_user_info = ProtoField.string("execution_report.user_info", "UserInfo"),
    execution_report_order_id = ProtoField.string("execution_report.order_id", "OrderID"),
    execution_report_cl_ord_id = ProtoField.string("execution_report.cl_ord_id", "ClOrdID"),
    execution_report_quote_msg_id = ProtoField.string("execution_report.quote_msg_id", "QuoteMsgID"),
    execution_report_exec_id = ProtoField.string("execution_report.exec_id", "ExecID"),
    execution_report_exec_type = ProtoField.char("execution_report.exec_type", "ExecType", base.OCT),
    execution_report_ord_status = ProtoField.char("execution_report.ord_status", "OrdStatus", base.OCT),
    execution_report_last_px = ProtoField.int64("execution_report.last_px", "LastPx", base.DEC),
    execution_report_last_qty = ProtoField.int64("execution_report.last_qty", "LastQty", base.DEC),
    execution_report_leaves_qty = ProtoField.int64("execution_report.leaves_qty", "LeavesQty", base.DEC),
    execution_report_cum_qty = ProtoField.int64("execution_report.cum_qty", "CumQty", base.DEC),
    execution_report_side = ProtoField.char("execution_report.side", "Side", base.OCT),
    execution_report_account_id = ProtoField.string("execution_report.account_id", "AccountID"),
    execution_report_branch_id = ProtoField.string("execution_report.branch_id", "BranchID"),
    -- Unsupported type: match
    -- Field from Extend200115
    extend_200115_cash_margin = ProtoField.char("extend_200115.cash_margin", "CashMargin", base.OCT),
    -- Field from Extend200215
    extend_200215_maturity_date = ProtoField.uint32("extend_200215.maturity_date", "MaturityDate", base.DEC),
    -- Field from Extend200315
    extend_200315_maturity_date = ProtoField.uint32("extend_200315.maturity_date", "MaturityDate", base.DEC),
    -- Field from Extend200415
    extend_200415_position_effect = ProtoField.char("extend_200415.position_effect", "PositionEffect", base.OCT),
    extend_200415_covered_or_uncovered = ProtoField.uint32("extend_200415.covered_or_uncovered", "CoveredOrUncovered", base.DEC),
    extend_200415_contract_account_code = ProtoField.string("extend_200415.contract_account_code", "ContractAccountCode"),
    extend_200415_secondary_order_id = ProtoField.string("extend_200415.secondary_order_id", "SecondaryOrderID"),
    -- Field from Extend200515
    extend_200515_confirm_id = ProtoField.string("extend_200515.confirm_id", "ConfirmID"),
    extend_200515_cash_margin = ProtoField.char("extend_200515.cash_margin", "CashMargin", base.OCT),
    -- Field from Extend200615
    extend_200615_cash_margin = ProtoField.char("extend_200615.cash_margin", "CashMargin", base.OCT),
    -- Field from Extend206315
    extend_206315_cash_margin = ProtoField.char("extend_206315.cash_margin", "CashMargin", base.OCT),
    -- Field from Extend200715
    extend_200715_expiration_days = ProtoField.uint32("extend_200715.expiration_days", "ExpirationDays", base.DEC),
    extend_200715_expiration_type = ProtoField.uint32("extend_200715.expiration_type", "ExpirationType", base.DEC),
    extend_200715_maturity_date = ProtoField.uint32("extend_200715.maturity_date", "MaturityDate", base.DEC),
    extend_200715_share_property = ProtoField.string("extend_200715.share_property", "ShareProperty"),
    -- Field from Extend204715
    extend_204715_expiration_days = ProtoField.uint32("extend_204715.expiration_days", "ExpirationDays", base.DEC),
    extend_204715_expiration_type = ProtoField.uint32("extend_204715.expiration_type", "ExpirationType", base.DEC),
    extend_204715_maturity_date = ProtoField.uint32("extend_204715.maturity_date", "MaturityDate", base.DEC),
    extend_204715_share_property = ProtoField.string("extend_204715.share_property", "ShareProperty"),
    -- Field from Extend203715
    extend_203715_cash_margin = ProtoField.char("extend_203715.cash_margin", "CashMargin", base.OCT),
    -- Field from Extend204115
    extend_204115_cash_margin = ProtoField.char("extend_204115.cash_margin", "CashMargin", base.OCT),
    extend_204115_settl_type = ProtoField.uint32("extend_204115.settl_type", "SettlType", base.DEC),
    extend_204115_settl_period = ProtoField.uint32("extend_204115.settl_period", "SettlPeriod", base.DEC),
    extend_204115_counterparty_member_id = ProtoField.string("extend_204115.counterparty_member_id", "CounterpartyMemberID"),
    extend_204115_counterparty_investor_type = ProtoField.string("extend_204115.counterparty_investor_type", "CounterpartyInvestorType"),
    extend_204115_counterparty_investor_id = ProtoField.string("extend_204115.counterparty_investor_id", "CounterpartyInvestorID"),
    extend_204115_counterparty_investor_name = ProtoField.string("extend_204115.counterparty_investor_name", "CounterpartyInvestorName"),
    extend_204115_counterparty_trader_code = ProtoField.string("extend_204115.counterparty_trader_code", "CounterpartyTraderCode"),
    -- Field from Extend204130
    extend_204130_member_id = ProtoField.string("extend_204130.member_id", "MemberID"),
    extend_204130_investor_type = ProtoField.string("extend_204130.investor_type", "InvestorType"),
    extend_204130_investor_id = ProtoField.string("extend_204130.investor_id", "InvestorID"),
    extend_204130_investor_name = ProtoField.string("extend_204130.investor_name", "InvestorName"),
    extend_204130_trader_code = ProtoField.string("extend_204130.trader_code", "TraderCode"),
    extend_204130_counterparty_member_id = ProtoField.string("extend_204130.counterparty_member_id", "CounterpartyMemberID"),
    extend_204130_counterparty_investor_type = ProtoField.string("extend_204130.counterparty_investor_type", "CounterpartyInvestorType"),
    extend_204130_counterparty_investor_id = ProtoField.string("extend_204130.counterparty_investor_id", "CounterpartyInvestorID"),
    extend_204130_counterparty_investor_name = ProtoField.string("extend_204130.counterparty_investor_name", "CounterpartyInvestorName"),
    extend_204130_counterparty_trader_code = ProtoField.string("extend_204130.counterparty_trader_code", "CounterpartyTraderCode"),
    extend_204130_secondary_order_id = ProtoField.string("extend_204130.secondary_order_id", "SecondaryOrderID"),
    extend_204130_bid_trans_type = ProtoField.uint32("extend_204130.bid_trans_type", "BidTransType", base.DEC),
    extend_204130_bid_exec_inst_type = ProtoField.uint32("extend_204130.bid_exec_inst_type", "BidExecInstType", base.DEC),
    extend_204130_settl_type = ProtoField.uint32("extend_204130.settl_type", "SettlType", base.DEC),
    extend_204130_settl_period = ProtoField.uint32("extend_204130.settl_period", "SettlPeriod", base.DEC),
    extend_204130_cash_margin = ProtoField.char("extend_204130.cash_margin", "CashMargin", base.OCT),
    extend_204130_memo = ProtoField.string("extend_204130.memo", "Memo"),
    -- Field from OrderCancelRequest
    order_cancel_request_appl_id = ProtoField.string("order_cancel_request.appl_id", "ApplID"),
    order_cancel_request_submitting_pbuid = ProtoField.string("order_cancel_request.submitting_pbuid", "SubmittingPBUID"),
    order_cancel_request_security_id = ProtoField.string("order_cancel_request.security_id", "SecurityID"),
    order_cancel_request_security_id_source = ProtoField.string("order_cancel_request.security_id_source", "SecurityIDSource"),
    order_cancel_request_owner_type = ProtoField.uint32("order_cancel_request.owner_type", "OwnerType", base.DEC),
    order_cancel_request_clearing_firm = ProtoField.string("order_cancel_request.clearing_firm", "ClearingFirm"),
    order_cancel_request_transact_time = ProtoField.int64("order_cancel_request.transact_time", "TransactTime", base.DEC),
    order_cancel_request_user_info = ProtoField.string("order_cancel_request.user_info", "UserInfo"),
    order_cancel_request_cl_ord_id = ProtoField.string("order_cancel_request.cl_ord_id", "ClOrdID"),
    order_cancel_request_orig_cl_ord_id = ProtoField.string("order_cancel_request.orig_cl_ord_id", "OrigClOrdID"),
    order_cancel_request_side = ProtoField.char("order_cancel_request.side", "Side", base.OCT),
    order_cancel_request_order_id = ProtoField.string("order_cancel_request.order_id", "OrderID"),
    order_cancel_request_order_qty = ProtoField.int64("order_cancel_request.order_qty", "OrderQty", base.DEC),
    -- Field from CancelReject
    cancel_reject_partition_no = ProtoField.int("cancel_reject.partition_no", "PartitionNo", base.DEC),
    cancel_reject_report_index = ProtoField.int64("cancel_reject.report_index", "ReportIndex", base.DEC),
    cancel_reject_appl_id = ProtoField.string("cancel_reject.appl_id", "ApplID"),
    cancel_reject_reporting_pbuid = ProtoField.string("cancel_reject.reporting_pbuid", "ReportingPBUID"),
    cancel_reject_submitting_pbuid = ProtoField.string("cancel_reject.submitting_pbuid", "SubmittingPBUID"),
    cancel_reject_security_id = ProtoField.string("cancel_reject.security_id", "SecurityID"),
    cancel_reject_security_id_source = ProtoField.string("cancel_reject.security_id_source", "SecurityIDSource"),
    cancel_reject_owner_type = ProtoField.uint32("cancel_reject.owner_type", "OwnerType", base.DEC),
    cancel_reject_clearing_firm = ProtoField.string("cancel_reject.clearing_firm", "ClearingFirm"),
    cancel_reject_transact_time = ProtoField.int64("cancel_reject.transact_time", "TransactTime", base.DEC),
    cancel_reject_user_info = ProtoField.string("cancel_reject.user_info", "UserInfo"),
    cancel_reject_cl_ord_id = ProtoField.string("cancel_reject.cl_ord_id", "ClOrdID"),
    cancel_reject_orig_cl_ord_id = ProtoField.string("cancel_reject.orig_cl_ord_id", "OrigClOrdID"),
    cancel_reject_side = ProtoField.char("cancel_reject.side", "Side", base.OCT),
    cancel_reject_ord_status = ProtoField.char("cancel_reject.ord_status", "OrdStatus", base.OCT),
    cancel_reject_cxl_rej_reason = ProtoField.uint32("cancel_reject.cxl_rej_reason", "CxlRejReason", base.DEC),
    cancel_reject_reject_text = ProtoField.string("cancel_reject.reject_text", "RejectText"),
    cancel_reject_order_id = ProtoField.string("cancel_reject.order_id", "OrderID"),
    -- Field from BusinessReject
    business_reject_appl_id = ProtoField.string("business_reject.appl_id", "ApplID"),
    business_reject_transact_time = ProtoField.int64("business_reject.transact_time", "TransactTime", base.DEC),
    business_reject_submitting_pbuid = ProtoField.string("business_reject.submitting_pbuid", "SubmittingPBUID"),
    business_reject_security_id = ProtoField.string("business_reject.security_id", "SecurityID"),
    business_reject_security_id_source = ProtoField.string("business_reject.security_id_source", "SecurityIDSource"),
    business_reject_ref_seq_num = ProtoField.int64("business_reject.ref_seq_num", "RefSeqNum", base.DEC),
    business_reject_ref_msg_type = ProtoField.uint32("business_reject.ref_msg_type", "RefMsgType", base.DEC),
    business_reject_business_reject_ref_id = ProtoField.string("business_reject.business_reject_ref_id", "BusinessRejectRefID"),
    business_reject_business_reject_reason = ProtoField.uint32("business_reject.business_reject_reason", "BusinessRejectReason", base.DEC),
    business_reject_business_reject_text = ProtoField.string("business_reject.business_reject_text", "BusinessRejectText"),
    -- Field from ReportSynchronization
    report_synchronization_no_partitions = ProtoField.uint32("report_synchronization.no_partitions", "NoPartitions", base.DEC),
    -- Field from PartitionReport
    partition_report_partition_no = ProtoField.int("partition_report.partition_no", "PartitionNo", base.DEC),
    partition_report_report_index = ProtoField.int64("partition_report.report_index", "ReportIndex", base.DEC),
    -- Field from PartitionReport
    partition_report_partition_no = ProtoField.int("partition_report.partition_no", "PartitionNo", base.DEC),
    partition_report_report_index = ProtoField.int64("partition_report.report_index", "ReportIndex", base.DEC),
    -- Field from PlatformStateInfo
    platform_state_info_platform_id = ProtoField.uint32("platform_state_info.platform_id", "PlatformID", base.DEC),
    platform_state_info_platform_state = ProtoField.uint32("platform_state_info.platform_state", "PlatformState", base.DEC),
    -- Field from ReportFinished
    report_finished_partition_no = ProtoField.int("report_finished.partition_no", "PartitionNo", base.DEC),
    report_finished_report_index = ProtoField.int64("report_finished.report_index", "ReportIndex", base.DEC),
    report_finished_platform_id = ProtoField.uint32("report_finished.platform_id", "PlatformID", base.DEC),
    -- Field from PlatformInfo
    platform_info_platform_id = ProtoField.uint32("platform_info.platform_id", "PlatformID", base.DEC),
    platform_info_no_partitions = ProtoField.uint32("platform_info.no_partitions", "NoPartitions", base.DEC),
    -- Field from PlatformPartition
    platform_partition_partition_no = ProtoField.int("platform_partition.partition_no", "PartitionNo", base.DEC),
    -- Field from PlatformPartition
    platform_partition_partition_no = ProtoField.int("platform_partition.partition_no", "PartitionNo", base.DEC),
    -- Field from TradingSessionStatus
    trading_session_status_market_id = ProtoField.string("trading_session_status.market_id", "MarketID"),
    trading_session_status_market_segment_id = ProtoField.string("trading_session_status.market_segment_id", "MarketSegmentID"),
    trading_session_status_trading_session_id = ProtoField.string("trading_session_status.trading_session_id", "TradingSessionID"),
    trading_session_status_trading_session_sub_id = ProtoField.string("trading_session_status.trading_session_sub_id", "TradingSessionSubID"),
    trading_session_status_trad_ses_status = ProtoField.uint32("trading_session_status.trad_ses_status", "TradSesStatus", base.DEC),
    trading_session_status_trad_ses_start_time = ProtoField.int64("trading_session_status.trad_ses_start_time", "TradSesStartTime", base.DEC),
    trading_session_status_trad_ses_end_time = ProtoField.int64("trading_session_status.trad_ses_end_time", "TradSesEndTime", base.DEC),
}

for _, field in pairs(fields) do
    szse_binary_proto.fields[field] = field
end

local function dissect_logon(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Logon")
    subtree:add(fields.logon_sender_comp_id, buf(offset, 20))
    offset = offset + 20
    subtree:add(fields.logon_target_comp_id, buf(offset, 20))
    offset = offset + 20
    subtree:add(fields.logon_heart_bt_int, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.logon_password, buf(offset, 16))
    offset = offset + 16
    subtree:add(fields.logon_default_appl_ver_id, buf(offset, 32))
    offset = offset + 32
    return offset
end


local function dissect_logout(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Logout")
    subtree:add(fields.logout_session_status, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.logout_text, buf(offset, 200))
    offset = offset + 200
    return offset
end


local function dissect_heartbeat(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Heartbeat")
    subtree:append_text(" (No Body)")
    return offset
end


local function dissect_new_order(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "NewOrder")
    local appl_id = buf(offset, 4):uint()
    subtree:add(fields.new_order_appl_id, buf(offset, 3))
    offset = offset + 3
    subtree:add(fields.new_order_submitting_pbuid, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.new_order_security_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.new_order_security_id_source, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.new_order_owner_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.new_order_clearing_firm, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.new_order_transact_time, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.new_order_user_info, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.new_order_cl_ord_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.new_order_account_id, buf(offset, 12))
    offset = offset + 12
    subtree:add(fields.new_order_branch_id, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.new_order_order_restrictions, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.new_order_side, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.new_order_ord_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.new_order_order_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.new_order_price, buf(offset, 8))
    offset = offset + 8
    if appl_id == "010" then -- Extend100101
        dissect_extend_100101(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend100101")
    elseif appl_id == "020" then -- Extend100201
        dissect_extend_100201(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend100201")
    elseif appl_id == "030" then -- Extend100301
        dissect_extend_100301(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend100301")
    elseif appl_id == "051" then -- Extend100501
        dissect_extend_100501(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend100501")
    elseif appl_id == "052" then -- Extend100501
        dissect_extend_100501(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend100501")
    elseif appl_id == "060" then -- Extend100601
        dissect_extend_100601(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend100601")
    elseif appl_id == "061" then -- Extend100601
        dissect_extend_100601(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend100601")
    elseif appl_id == "070" then -- Extend100701
        dissect_extend_100701(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend100701")
    elseif appl_id == "150" then -- Extend101501
        dissect_extend_101501(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend101501")
    elseif appl_id == "151" then -- Extend101501
        dissect_extend_101501(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend101501")
    elseif appl_id == "152" then -- Extend101501
        dissect_extend_101501(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend101501")
    elseif appl_id == "160" then -- Extend101601
        dissect_extend_101601(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend101601")
    elseif appl_id == "170" then -- Extend101701
        dissect_extend_101701(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend101701")
    elseif appl_id == "180" then -- Extend101801
        dissect_extend_101801(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend101801")
    elseif appl_id == "181" then -- Extend101801
        dissect_extend_101801(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend101801")
    elseif appl_id == "270" then -- Extend102701
        dissect_extend_102701(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend102701")
    elseif appl_id == "271" then -- Extend102701
        dissect_extend_102701(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend102701")
    elseif appl_id == "280" then -- Extend102801
        dissect_extend_102801(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend102801")
    elseif appl_id == "281" then -- Extend102801
        dissect_extend_102801(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend102801")
    elseif appl_id == "290" then -- Extend102901
        dissect_extend_102901(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend102901")
    elseif appl_id == "291" then -- Extend102901
        dissect_extend_102901(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend102901")
    elseif appl_id == "630" then -- Extend106301
        dissect_extend_106301(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend106301")
    elseif appl_id == "350" then -- Extend103501
        dissect_extend_103501(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend103501")
    elseif appl_id == "351" then -- Extend103501
        dissect_extend_103501(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend103501")
    elseif appl_id == "370" then -- Extend103701
        dissect_extend_103701(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend103701")
    elseif appl_id == "410" then -- Extend104101
        dissect_extend_104101(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend104101")
    elseif appl_id == "417" then -- Extend104128
        dissect_extend_104128(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend104128")
    elseif appl_id == "470" then -- Extend104701
        dissect_extend_104701(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend104701")
    end
    return offset
end


local function dissect_extend_100101(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend100101")
    subtree:add(fields.extend_100101_stop_px, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_100101_min_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_100101_max_price_levels, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_100101_time_in_force, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_100101_cash_margin, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_100201(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend100201")
    subtree:add(fields.extend_100201_stop_px, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_100201_min_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_100201_max_price_levels, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_100201_time_in_force, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_100301(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend100301")
    subtree:add(fields.extend_100301_stop_px, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_100301_min_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_100301_max_price_levels, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_100301_time_in_force, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_101401(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend101401")
    subtree:add(fields.extend_101401_stop_px, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_101401_min_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_101401_max_price_levels, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_101401_time_in_force, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_101401_position_effect, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_101401_covered_or_uncovered, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_101401_contract_account_code, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.extend_101401_secondary_order_id, buf(offset, 16))
    offset = offset + 16
    return offset
end


local function dissect_extend_100501(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend100501")
    subtree:add(fields.extend_100501_confirm_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_100501_cash_margin, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_100601(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend100601")
    subtree:add(fields.extend_100601_cash_margin, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_100701(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend100701")
    subtree:add(fields.extend_100701_expiration_days, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_100701_expiration_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_100701_share_property, buf(offset, 2))
    offset = offset + 2
    return offset
end


local function dissect_extend_101501(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend101501")
    subtree:add(fields.extend_101501_share_property, buf(offset, 2))
    offset = offset + 2
    return offset
end


local function dissect_extend_101601(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend101601")
    subtree:add(fields.extend_101601_contract_account_code, buf(offset, 6))
    offset = offset + 6
    return offset
end


local function dissect_extend_101701(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend101701")
    subtree:add(fields.extend_101701_cash_order_qty, buf(offset, 8))
    offset = offset + 8
    return offset
end


local function dissect_extend_101801(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend101801")
    subtree:add(fields.extend_101801_tenderer, buf(offset, 6))
    offset = offset + 6
    return offset
end


local function dissect_extend_102701(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend102701")
    subtree:add(fields.extend_102701_disposal_pbu, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.extend_102701_disposal_account_id, buf(offset, 12))
    offset = offset + 12
    return offset
end


local function dissect_extend_102801(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend102801")
    subtree:add(fields.extend_102801_lender_pbu, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.extend_102801_lender_account_id, buf(offset, 12))
    offset = offset + 12
    return offset
end


local function dissect_extend_102901(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend102901")
    subtree:add(fields.extend_102901_deduction_pbu, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.extend_102901_deduction_account_id, buf(offset, 12))
    offset = offset + 12
    return offset
end


local function dissect_extend_106301(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend106301")
    subtree:add(fields.extend_106301_stop_px, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_106301_min_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_106301_max_price_levels, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_106301_time_in_force, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_106301_lot_type, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_103501(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend103501")
    subtree:add(fields.extend_103501_contract_account_code, buf(offset, 6))
    offset = offset + 6
    return offset
end


local function dissect_extend_103701(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend103701")
    subtree:add(fields.extend_103701_cash_margin, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_104101(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend104101")
    subtree:add(fields.extend_104101_stop_px, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_104101_min_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_104101_max_price_levels, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_104101_time_in_force, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_104101_cash_margin, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_104128(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend104128")
    subtree:add(fields.extend_104128_member_id, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.extend_104128_investor_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_104128_investor_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.extend_104128_investor_name, buf(offset, 120))
    offset = offset + 120
    subtree:add(fields.extend_104128_trader_code, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_104128_secondary_order_id, buf(offset, 16))
    offset = offset + 16
    subtree:add(fields.extend_104128_bid_trans_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_104128_bid_exec_inst_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_104128_low_limit_price, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_104128_high_limit_price, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_104128_min_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_104128_trade_date, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.extend_104128_settl_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_104128_settl_period, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_104128_pre_trade_anonymity, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_104128_cash_margin, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_104128_memo, buf(offset, 160))
    offset = offset + 160
    return offset
end


local function dissect_extend_104701(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend104701")
    subtree:add(fields.extend_104701_secondary_order_id, buf(offset, 16))
    offset = offset + 16
    return offset
end


local function dissect_execution_confirm(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "ExecutionConfirm")
    subtree:add(fields.execution_confirm_partition_no, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.execution_confirm_report_index, buf(offset, 8))
    offset = offset + 8
    local appl_id = buf(offset, 4):uint()
    subtree:add(fields.execution_confirm_appl_id, buf(offset, 3))
    offset = offset + 3
    subtree:add(fields.execution_confirm_reporting_pbuid, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.execution_confirm_submitting_pbuid, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.execution_confirm_security_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.execution_confirm_security_id_source, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.execution_confirm_owner_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.execution_confirm_clearing_firm, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.execution_confirm_transact_time, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.execution_confirm_user_info, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.execution_confirm_order_id, buf(offset, 16))
    offset = offset + 16
    subtree:add(fields.execution_confirm_cl_ord_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.execution_confirm_quote_msg_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.execution_confirm_orig_cl_ord_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.execution_confirm_exec_id, buf(offset, 16))
    offset = offset + 16
    subtree:add(fields.execution_confirm_exec_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.execution_confirm_ord_status, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.execution_confirm_ord_rej_reason, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.execution_confirm_leaves_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.execution_confirm_cum_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.execution_confirm_side, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.execution_confirm_ord_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.execution_confirm_order_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.execution_confirm_price, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.execution_confirm_account_id, buf(offset, 12))
    offset = offset + 12
    subtree:add(fields.execution_confirm_branch_id, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.execution_confirm_order_restrictions, buf(offset, 4))
    offset = offset + 4
    if appl_id == "010" then -- Extend200102
        dissect_extend_200102(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend200102")
    elseif appl_id == "020" then -- Extend200202
        dissect_extend_200202(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend200202")
    elseif appl_id == "030" then -- Extend200302
        dissect_extend_200302(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend200302")
    elseif appl_id == "051" then -- Extend200502
        dissect_extend_200502(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend200502")
    elseif appl_id == "052" then -- Extend200502
        dissect_extend_200502(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend200502")
    elseif appl_id == "060" then -- Extend200602
        dissect_extend_200602(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend200602")
    elseif appl_id == "061" then -- Extend200602
        dissect_extend_200602(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend200602")
    elseif appl_id == "070" then -- Extend200702
        dissect_extend_200702(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend200702")
    elseif appl_id == "150" then -- Extend201502
        dissect_extend_201502(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend201502")
    elseif appl_id == "151" then -- Extend201502
        dissect_extend_201502(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend201502")
    elseif appl_id == "152" then -- Extend201502
        dissect_extend_201502(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend201502")
    elseif appl_id == "160" then -- Extend201602
        dissect_extend_201602(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend201602")
    elseif appl_id == "170" then -- Extend201702
        dissect_extend_201702(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend201702")
    elseif appl_id == "180" then -- Extend201802
        dissect_extend_201802(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend201802")
    elseif appl_id == "181" then -- Extend201802
        dissect_extend_201802(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend201802")
    elseif appl_id == "270" then -- Extend202702
        dissect_extend_202702(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend202702")
    elseif appl_id == "271" then -- Extend202702
        dissect_extend_202702(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend202702")
    elseif appl_id == "280" then -- Extend202802
        dissect_extend_202802(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend202802")
    elseif appl_id == "281" then -- Extend202802
        dissect_extend_202802(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend202802")
    elseif appl_id == "290" then -- Extend202902
        dissect_extend_202902(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend202902")
    elseif appl_id == "291" then -- Extend202902
        dissect_extend_202902(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend202902")
    elseif appl_id == "630" then -- Extend206302
        dissect_extend_206302(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend206302")
    elseif appl_id == "350" then -- Extend203502
        dissect_extend_203502(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend203502")
    elseif appl_id == "351" then -- Extend203502
        dissect_extend_203502(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend203502")
    elseif appl_id == "370" then -- Extend203702
        dissect_extend_203702(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend203702")
    elseif appl_id == "410" then -- Extend204102
        dissect_extend_204102(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend204102")
    elseif appl_id == "417" then -- Extend204129
        dissect_extend_204129(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend204129")
    elseif appl_id == "470" then -- Extend204702
        dissect_extend_204702(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend204702")
    end
    return offset
end


local function dissect_extend_200102(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend200102")
    subtree:add(fields.extend_200102_stop_px, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_200102_min_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_200102_max_price_levels, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_200102_time_in_force, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_200102_cash_margin, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_200202(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend200202")
    subtree:add(fields.extend_200202_stop_px, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_200202_min_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_200202_max_price_levels, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_200202_time_in_force, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_200302(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend200302")
    subtree:add(fields.extend_200302_stop_px, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_200302_min_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_200302_max_price_levels, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_200302_time_in_force, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_200402(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend200402")
    subtree:add(fields.extend_200402_stop_px, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_200402_min_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_200402_max_price_levels, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_200402_time_in_force, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_200402_position_effect, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_200402_covered_or_uncovered, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_200402_contract_account_code, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.extend_200402_secondary_order_id, buf(offset, 16))
    offset = offset + 16
    return offset
end


local function dissect_extend_200502(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend200502")
    subtree:add(fields.extend_200502_confirm_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_200502_cash_margin, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_200602(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend200602")
    subtree:add(fields.extend_200602_cash_margin, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_200702(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend200702")
    subtree:add(fields.extend_200702_expiration_days, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_200702_expiration_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_200702_share_property, buf(offset, 2))
    offset = offset + 2
    return offset
end


local function dissect_extend_201202(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend201202")
    subtree:add(fields.extend_201202_insufficient_security_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_201202_no_security, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.extend_201202_underlying_security_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_201202_underlying_security_id_source, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.extend_201202_delivery_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_201202_subst_cash, buf(offset, 8))
    offset = offset + 8
    return offset
end


local function dissect_extend_201502(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend201502")
    subtree:add(fields.extend_201502_share_property, buf(offset, 2))
    offset = offset + 2
    return offset
end


local function dissect_extend_201602(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend201602")
    subtree:add(fields.extend_201602_contract_account_code, buf(offset, 6))
    offset = offset + 6
    return offset
end


local function dissect_extend_201702(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend201702")
    subtree:add(fields.extend_201702_cash_order_qty, buf(offset, 8))
    offset = offset + 8
    return offset
end


local function dissect_extend_201802(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend201802")
    subtree:add(fields.extend_201802_tenderer, buf(offset, 6))
    offset = offset + 6
    return offset
end


local function dissect_extend_202702(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend202702")
    subtree:add(fields.extend_202702_disposal_pbu, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.extend_202702_disposal_account_id, buf(offset, 12))
    offset = offset + 12
    return offset
end


local function dissect_extend_202802(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend202802")
    subtree:add(fields.extend_202802_lender_pbu, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.extend_202802_lender_account_id, buf(offset, 12))
    offset = offset + 12
    return offset
end


local function dissect_extend_202902(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend202902")
    subtree:add(fields.extend_202902_deduction_pbu, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.extend_202902_deduction_account_id, buf(offset, 12))
    offset = offset + 12
    return offset
end


local function dissect_extend_203102(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend203102")
    subtree:add(fields.extend_203102_insufficient_security_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_203102_no_security, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.extend_203102_underlying_security_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_203102_underlying_security_id_source, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.extend_203102_delivery_qty, buf(offset, 8))
    offset = offset + 8
    return offset
end


local function dissect_extend_206302(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend206302")
    subtree:add(fields.extend_206302_reject_text, buf(offset, 16))
    offset = offset + 16
    subtree:add(fields.extend_206302_stop_px, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_206302_min_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_206302_max_price_levels, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_206302_time_in_force, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_206302_lot_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_206302_imc_reject_text_len, buf(offset, 4))
    offset = offset + 4
    local extend_206302_imc_reject_text_len = buf(offset, 4):uint()
    subtree:add("IMCRejectText Len: ".. extend_206302_imc_reject_text_len, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.extend_206302_imc_reject_text, buf(offset, extend_206302_imc_reject_text_len))
    offset = offset + extend_206302_imc_reject_text_len
    return offset
end


local function dissect_extend_203502(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend203502")
    subtree:add(fields.extend_203502_contract_account_code, buf(offset, 6))
    offset = offset + 6
    return offset
end


local function dissect_extend_203702(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend203702")
    subtree:add(fields.extend_203702_cash_margin, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_204102(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend204102")
    subtree:add(fields.extend_204102_stop_px, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_204102_min_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_204102_max_price_levels, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_204102_time_in_force, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_204102_cash_margin, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_204129(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend204129")
    subtree:add(fields.extend_204129_member_id, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.extend_204129_investor_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_204129_investor_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.extend_204129_investor_name, buf(offset, 120))
    offset = offset + 120
    subtree:add(fields.extend_204129_trader_code, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_204129_secondary_order_id, buf(offset, 16))
    offset = offset + 16
    subtree:add(fields.extend_204129_bid_trans_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_204129_bid_exec_inst_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_204129_low_limit_price, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_204129_high_limit_price, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_204129_min_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_204129_trade_date, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.extend_204129_settl_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_204129_settl_period, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_204129_pre_trade_anonymity, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_204129_cash_margin, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_204129_memo, buf(offset, 160))
    offset = offset + 160
    return offset
end


local function dissect_extend_204702(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend204702")
    subtree:add(fields.extend_204702_secondary_order_id, buf(offset, 16))
    offset = offset + 16
    return offset
end


local function dissect_execution_report(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "ExecutionReport")
    subtree:add(fields.execution_report_partition_no, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.execution_report_report_index, buf(offset, 8))
    offset = offset + 8
    local appl_id = buf(offset, 4):uint()
    subtree:add(fields.execution_report_appl_id, buf(offset, 3))
    offset = offset + 3
    subtree:add(fields.execution_report_reporting_pbuid, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.execution_report_submitting_pbuid, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.execution_report_security_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.execution_report_security_id_source, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.execution_report_owner_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.execution_report_clearing_firm, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.execution_report_transact_time, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.execution_report_user_info, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.execution_report_order_id, buf(offset, 16))
    offset = offset + 16
    subtree:add(fields.execution_report_cl_ord_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.execution_report_quote_msg_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.execution_report_exec_id, buf(offset, 16))
    offset = offset + 16
    subtree:add(fields.execution_report_exec_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.execution_report_ord_status, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.execution_report_last_px, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.execution_report_last_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.execution_report_leaves_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.execution_report_cum_qty, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.execution_report_side, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.execution_report_account_id, buf(offset, 12))
    offset = offset + 12
    subtree:add(fields.execution_report_branch_id, buf(offset, 4))
    offset = offset + 4
    if appl_id == "010" then -- Extend200115
        dissect_extend_200115(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend200115")
    elseif appl_id == "020" then -- Extend200215
        dissect_extend_200215(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend200215")
    elseif appl_id == "030" then -- Extend200315
        dissect_extend_200315(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend200315")
    elseif appl_id == "051" then -- Extend200515
        dissect_extend_200515(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend200515")
    elseif appl_id == "052" then -- Extend200515
        dissect_extend_200515(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend200515")
    elseif appl_id == "056" then -- Extend200515
        dissect_extend_200515(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend200515")
    elseif appl_id == "057" then -- Extend200515
        dissect_extend_200515(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend200515")
    elseif appl_id == "060" then -- Extend200615
        dissect_extend_200615(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend200615")
    elseif appl_id == "061" then -- Extend200615
        dissect_extend_200615(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend200615")
    elseif appl_id == "070" then -- Extend200715
        dissect_extend_200715(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend200715")
    elseif appl_id == "630" then -- Extend206315
        dissect_extend_206315(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend206315")
    elseif appl_id == "370" then -- Extend203715
        dissect_extend_203715(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend203715")
    elseif appl_id == "410" then -- Extend204115
        dissect_extend_204115(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend204115")
    elseif appl_id == "412" then -- Extend204115
        dissect_extend_204115(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend204115")
    elseif appl_id == "413" then -- Extend204115
        dissect_extend_204115(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend204115")
    elseif appl_id == "415" then -- Extend204115
        dissect_extend_204115(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend204115")
    elseif appl_id == "416" then -- Extend204115
        dissect_extend_204115(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend204115")
    elseif appl_id == "417" then -- Extend204130
        dissect_extend_204130(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend204130")
    elseif appl_id == "470" then -- Extend204715
        dissect_extend_204715(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Extend204715")
    end
    return offset
end


local function dissect_extend_200115(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend200115")
    subtree:add(fields.extend_200115_cash_margin, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_200215(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend200215")
    subtree:add(fields.extend_200215_maturity_date, buf(offset, 4))
    offset = offset + 4
    return offset
end


local function dissect_extend_200315(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend200315")
    subtree:add(fields.extend_200315_maturity_date, buf(offset, 4))
    offset = offset + 4
    return offset
end


local function dissect_extend_200415(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend200415")
    subtree:add(fields.extend_200415_position_effect, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_200415_covered_or_uncovered, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_200415_contract_account_code, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.extend_200415_secondary_order_id, buf(offset, 16))
    offset = offset + 16
    return offset
end


local function dissect_extend_200515(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend200515")
    subtree:add(fields.extend_200515_confirm_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_200515_cash_margin, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_200615(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend200615")
    subtree:add(fields.extend_200615_cash_margin, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_206315(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend206315")
    subtree:add(fields.extend_206315_cash_margin, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_200715(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend200715")
    subtree:add(fields.extend_200715_expiration_days, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_200715_expiration_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_200715_maturity_date, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.extend_200715_share_property, buf(offset, 2))
    offset = offset + 2
    return offset
end


local function dissect_extend_204715(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend204715")
    subtree:add(fields.extend_204715_expiration_days, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_204715_expiration_type, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_204715_maturity_date, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.extend_204715_share_property, buf(offset, 2))
    offset = offset + 2
    return offset
end


local function dissect_extend_203715(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend203715")
    subtree:add(fields.extend_203715_cash_margin, buf(offset, 1))
    offset = offset + 1
    return offset
end


local function dissect_extend_204115(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend204115")
    subtree:add(fields.extend_204115_cash_margin, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_204115_settl_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_204115_settl_period, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_204115_counterparty_member_id, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.extend_204115_counterparty_investor_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_204115_counterparty_investor_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.extend_204115_counterparty_investor_name, buf(offset, 120))
    offset = offset + 120
    subtree:add(fields.extend_204115_counterparty_trader_code, buf(offset, 8))
    offset = offset + 8
    return offset
end


local function dissect_extend_204130(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "Extend204130")
    subtree:add(fields.extend_204130_member_id, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.extend_204130_investor_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_204130_investor_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.extend_204130_investor_name, buf(offset, 120))
    offset = offset + 120
    subtree:add(fields.extend_204130_trader_code, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_204130_counterparty_member_id, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.extend_204130_counterparty_investor_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_204130_counterparty_investor_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.extend_204130_counterparty_investor_name, buf(offset, 120))
    offset = offset + 120
    subtree:add(fields.extend_204130_counterparty_trader_code, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.extend_204130_secondary_order_id, buf(offset, 16))
    offset = offset + 16
    subtree:add(fields.extend_204130_bid_trans_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_204130_bid_exec_inst_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_204130_settl_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.extend_204130_settl_period, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_204130_cash_margin, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.extend_204130_memo, buf(offset, 160))
    offset = offset + 160
    return offset
end


local function dissect_order_cancel_request(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "OrderCancelRequest")
    subtree:add(fields.order_cancel_request_appl_id, buf(offset, 3))
    offset = offset + 3
    subtree:add(fields.order_cancel_request_submitting_pbuid, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.order_cancel_request_security_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.order_cancel_request_security_id_source, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.order_cancel_request_owner_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.order_cancel_request_clearing_firm, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.order_cancel_request_transact_time, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.order_cancel_request_user_info, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.order_cancel_request_cl_ord_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.order_cancel_request_orig_cl_ord_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.order_cancel_request_side, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.order_cancel_request_order_id, buf(offset, 16))
    offset = offset + 16
    subtree:add(fields.order_cancel_request_order_qty, buf(offset, 8))
    offset = offset + 8
    return offset
end


local function dissect_cancel_reject(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "CancelReject")
    subtree:add(fields.cancel_reject_partition_no, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.cancel_reject_report_index, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.cancel_reject_appl_id, buf(offset, 3))
    offset = offset + 3
    subtree:add(fields.cancel_reject_reporting_pbuid, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.cancel_reject_submitting_pbuid, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.cancel_reject_security_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.cancel_reject_security_id_source, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.cancel_reject_owner_type, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.cancel_reject_clearing_firm, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.cancel_reject_transact_time, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.cancel_reject_user_info, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.cancel_reject_cl_ord_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.cancel_reject_orig_cl_ord_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.cancel_reject_side, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.cancel_reject_ord_status, buf(offset, 1))
    offset = offset + 1
    subtree:add(fields.cancel_reject_cxl_rej_reason, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.cancel_reject_reject_text, buf(offset, 16))
    offset = offset + 16
    subtree:add(fields.cancel_reject_order_id, buf(offset, 16))
    offset = offset + 16
    return offset
end


local function dissect_business_reject(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "BusinessReject")
    subtree:add(fields.business_reject_appl_id, buf(offset, 3))
    offset = offset + 3
    subtree:add(fields.business_reject_transact_time, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.business_reject_submitting_pbuid, buf(offset, 6))
    offset = offset + 6
    subtree:add(fields.business_reject_security_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.business_reject_security_id_source, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.business_reject_ref_seq_num, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.business_reject_ref_msg_type, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.business_reject_business_reject_ref_id, buf(offset, 10))
    offset = offset + 10
    subtree:add(fields.business_reject_business_reject_reason, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.business_reject_business_reject_text, buf(offset, 50))
    offset = offset + 50
    return offset
end


local function dissect_report_synchronization(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "ReportSynchronization")
    subtree:add(fields.report_synchronization_no_partitions, buf(offset, 4))
    offset = offset + 4
    local report_synchronization_partition_report_size = buf(offset, 4):uint()
    subtree:add("PartitionReport Size: ".. report_synchronization_partition_report_size, buf(offset, 4))
    offset = offset + 4
    for i=1,report_synchronization_partition_report_size do
        -- unsupported type: PartitionReport

        pinfo.cols.info:append(" PartitionReport["..i.."]")
    end
    return offset
end


local function dissect_partition_report(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "PartitionReport")
    subtree:add(fields.partition_report_partition_no, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.partition_report_report_index, buf(offset, 8))
    offset = offset + 8
    return offset
end


local function dissect_platform_state_info(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "PlatformStateInfo")
    subtree:add(fields.platform_state_info_platform_id, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.platform_state_info_platform_state, buf(offset, 2))
    offset = offset + 2
    return offset
end


local function dissect_report_finished(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "ReportFinished")
    subtree:add(fields.report_finished_partition_no, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.report_finished_report_index, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.report_finished_platform_id, buf(offset, 2))
    offset = offset + 2
    return offset
end


local function dissect_platform_info(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "PlatformInfo")
    subtree:add(fields.platform_info_platform_id, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.platform_info_no_partitions, buf(offset, 4))
    offset = offset + 4
    local platform_info_platform_partition_size = buf(offset, 4):uint()
    subtree:add("PlatformPartition Size: ".. platform_info_platform_partition_size, buf(offset, 4))
    offset = offset + 4
    for i=1,platform_info_platform_partition_size do
        -- unsupported type: PlatformPartition

        pinfo.cols.info:append(" PlatformPartition["..i.."]")
    end
    return offset
end


local function dissect_platform_partition(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "PlatformPartition")
    subtree:add(fields.platform_partition_partition_no, buf(offset, 4))
    offset = offset + 4
    return offset
end


local function dissect_trading_session_status(buf, pinfo, tree, offset)
    local subtree = tree:add(szse_binary_proto, buf(offset, 1), "TradingSessionStatus")
    subtree:add(fields.trading_session_status_market_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.trading_session_status_market_segment_id, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.trading_session_status_trading_session_id, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.trading_session_status_trading_session_sub_id, buf(offset, 4))
    offset = offset + 4
    subtree:add(fields.trading_session_status_trad_ses_status, buf(offset, 2))
    offset = offset + 2
    subtree:add(fields.trading_session_status_trad_ses_start_time, buf(offset, 8))
    offset = offset + 8
    subtree:add(fields.trading_session_status_trad_ses_end_time, buf(offset, 8))
    offset = offset + 8
    return offset
end


function szse_binary_proto.dissector(buf, pinfo, tree)
    pinfo.cols.protocol = "szse_binary"
    local offset = 0
    local msg_type = buf(offset, 4):uint()
    tree:add(fields.szse_binary_msg_type, buf(offset, 4))
    offset = offset + 4
    tree:add(fields.szse_binary_body_length, buf(offset, 4))
    offset = offset + 4
    if msg_type == 1 then -- Logon
        dissect_logon(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Logon")
    elseif msg_type == 2 then -- Logout
        dissect_logout(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Logout")
    elseif msg_type == 3 then -- Heartbeat
        dissect_heartbeat(buf, pinfo, tree, offset)
        pinfo.cols.info:set("Heartbeat")
    elseif msg_type == 4 then -- BusinessReject
        dissect_business_reject(buf, pinfo, tree, offset)
        pinfo.cols.info:set("BusinessReject")
    elseif msg_type == 5 then -- ReportSynchronization
        dissect_report_synchronization(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ReportSynchronization")
    elseif msg_type == 6 then -- PlatformStateInfo
        dissect_platform_state_info(buf, pinfo, tree, offset)
        pinfo.cols.info:set("PlatformStateInfo")
    elseif msg_type == 7 then -- ReportFinished
        dissect_report_finished(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ReportFinished")
    elseif msg_type == 9 then -- PlatformPartition
        dissect_platform_partition(buf, pinfo, tree, offset)
        pinfo.cols.info:set("PlatformPartition")
    elseif msg_type == 10 then -- TradingSessionStatus
        dissect_trading_session_status(buf, pinfo, tree, offset)
        pinfo.cols.info:set("TradingSessionStatus")
    elseif msg_type == 100101 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 100201 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 100301 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 100401 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 100501 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 100601 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 100701 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 101201 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 101301 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 101401 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 101501 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 101601 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 101701 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 101801 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 101901 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 102301 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 102701 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 102701 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 102801 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 102801 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 102901 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 102901 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 103101 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 103101 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 106301 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 103301 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 103501 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 103701 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 104101 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 104128 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 104701 then -- NewOrder
        dissect_new_order(buf, pinfo, tree, offset)
        pinfo.cols.info:set("NewOrder")
    elseif msg_type == 200102 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 200202 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 200302 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 200402 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 200502 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 200602 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 200702 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 201202 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 201302 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 201402 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 201502 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 201602 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 201702 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 201802 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 201902 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 202202 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 202302 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 202702 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 202702 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 202802 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 202802 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 202902 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 202902 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 203102 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 203102 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 206302 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 203302 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 203302 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 203502 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 203502 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 203702 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 204102 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 204129 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 204702 then -- ExecutionConfirm
        dissect_execution_confirm(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionConfirm")
    elseif msg_type == 200115 then -- ExecutionReport
        dissect_execution_report(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionReport")
    elseif msg_type == 200215 then -- ExecutionReport
        dissect_execution_report(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionReport")
    elseif msg_type == 200315 then -- ExecutionReport
        dissect_execution_report(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionReport")
    elseif msg_type == 200415 then -- ExecutionReport
        dissect_execution_report(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionReport")
    elseif msg_type == 200515 then -- ExecutionReport
        dissect_execution_report(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionReport")
    elseif msg_type == 200615 then -- ExecutionReport
        dissect_execution_report(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionReport")
    elseif msg_type == 200715 then -- ExecutionReport
        dissect_execution_report(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionReport")
    elseif msg_type == 206315 then -- ExecutionReport
        dissect_execution_report(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionReport")
    elseif msg_type == 203715 then -- ExecutionReport
        dissect_execution_report(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionReport")
    elseif msg_type == 204115 then -- ExecutionReport
        dissect_execution_report(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionReport")
    elseif msg_type == 204130 then -- ExecutionReport
        dissect_execution_report(buf, pinfo, tree, offset)
        pinfo.cols.info:set("ExecutionReport")
    elseif msg_type == 190007 then -- OrderCancelRequest
        dissect_order_cancel_request(buf, pinfo, tree, offset)
        pinfo.cols.info:set("OrderCancelRequest")
    elseif msg_type == 290008 then -- CancelReject
        dissect_cancel_reject(buf, pinfo, tree, offset)
        pinfo.cols.info:set("CancelReject")
    end
    tree:add(fields.szse_binary_checksum, buf(offset, 4))
    offset = offset + 4
end


local tcp_table = DissectorTable.get("tcp.port")
tcp_table:add(8080, szse_binary_proto)
